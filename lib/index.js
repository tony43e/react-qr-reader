'use strict';var _extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};var _createClass=function(){function defineProperties(target,props){for(var i=0;i<props.length;i++){var descriptor=props[i];descriptor.enumerable=descriptor.enumerable||false;descriptor.configurable=true;if("value"in descriptor)descriptor.writable=true;Object.defineProperty(target,descriptor.key,descriptor);}}return function(Constructor,protoProps,staticProps){if(protoProps)defineProperties(Constructor.prototype,protoProps);if(staticProps)defineProperties(Constructor,staticProps);return Constructor;};}();var _class,_temp;function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError("Cannot call a class as a function");}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError("this hasn't been initialised - super() hasn't been called");}return call&&(typeof call==="object"||typeof call==="function")?call:self;}function _inherits(subClass,superClass){if(typeof superClass!=="function"&&superClass!==null){throw new TypeError("Super expression must either be null or a function, not "+typeof superClass);}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass;}var React=require('react');var Component=React.Component,PropTypes=React.PropTypes;var getDeviceId=require('./getDeviceId');var havePropsChanged=require('./havePropsChanged');// Require adapter to support older browser implementations
require('webrtc-adapter');// Inline worker.js as a string value of workerBlob.
var workerBlob=new Blob(["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"jsQR\"] = factory();\n\telse\n\t\troot[\"jsQR\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/// <reference path=\"./common/types.d.ts\" />\r\n\tvar binarizer_1 = __webpack_require__(1);\r\n\tvar locator_1 = __webpack_require__(3);\r\n\tvar extractor_1 = __webpack_require__(4);\r\n\tvar decoder_1 = __webpack_require__(9);\r\n\tvar bitmatrix_1 = __webpack_require__(2);\r\n\tvar binarizeImage = binarizer_1.binarize;\r\n\texports.binarizeImage = binarizeImage;\r\n\tvar locateQRInBinaryImage = locator_1.locate;\r\n\texports.locateQRInBinaryImage = locateQRInBinaryImage;\r\n\tvar extractQRFromBinaryImage = extractor_1.extract;\r\n\texports.extractQRFromBinaryImage = extractQRFromBinaryImage;\r\n\tfunction decodeQR(matrix) {\r\n\t    return byteArrayToString(decoder_1.decode(matrix));\r\n\t}\r\n\texports.decodeQR = decodeQR;\r\n\t// return bytes.reduce((p, b) => p + String.fromCharCode(b), \"\");\r\n\tfunction byteArrayToString(bytes) {\r\n\t    var str = \"\";\r\n\t    if (bytes != null && bytes != undefined) {\r\n\t        for (var i = 0; i < bytes.length; i++) {\r\n\t            str += String.fromCharCode(bytes[i]);\r\n\t        }\r\n\t    }\r\n\t    return str;\r\n\t}\r\n\tfunction createBitMatrix(data, width) {\r\n\t    return new bitmatrix_1.BitMatrix(data, width);\r\n\t}\r\n\texports.createBitMatrix = createBitMatrix;\r\n\tfunction decodeQRFromImage(data, width, height) {\r\n\t    return byteArrayToString(decodeQRFromImageAsByteArray(data, width, height));\r\n\t}\r\n\texports.decodeQRFromImage = decodeQRFromImage;\r\n\tfunction decodeQRFromImageAsByteArray(data, width, height) {\r\n\t    var binarizedImage = binarizeImage(data, width, height);\r\n\t    var location = locator_1.locate(binarizedImage);\r\n\t    if (!location) {\r\n\t        return null;\r\n\t    }\r\n\t    var rawQR = extractor_1.extract(binarizedImage, location);\r\n\t    if (!rawQR) {\r\n\t        return null;\r\n\t    }\r\n\t    return decoder_1.decode(rawQR);\r\n\t}\r\n\texports.decodeQRFromImageAsByteArray = decodeQRFromImageAsByteArray;\r\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar bitmatrix_1 = __webpack_require__(2);\r\n\t// Magic Constants\r\n\tvar BLOCK_SIZE_POWER = 3;\r\n\tvar BLOCK_SIZE = 1 << BLOCK_SIZE_POWER;\r\n\tvar BLOCK_SIZE_MASK = BLOCK_SIZE - 1;\r\n\tvar MIN_DYNAMIC_RANGE = 24;\r\n\tfunction calculateBlackPoints(luminances, subWidth, subHeight, width, height) {\r\n\t    var blackPoints = new Array(subHeight);\r\n\t    for (var i = 0; i < subHeight; i++) {\r\n\t        blackPoints[i] = new Array(subWidth);\r\n\t    }\r\n\t    for (var y = 0; y < subHeight; y++) {\r\n\t        var yoffset = y << BLOCK_SIZE_POWER;\r\n\t        var maxYOffset = height - BLOCK_SIZE;\r\n\t        if (yoffset > maxYOffset) {\r\n\t            yoffset = maxYOffset;\r\n\t        }\r\n\t        for (var x = 0; x < subWidth; x++) {\r\n\t            var xoffset = x << BLOCK_SIZE_POWER;\r\n\t            var maxXOffset = width - BLOCK_SIZE;\r\n\t            if (xoffset > maxXOffset) {\r\n\t                xoffset = maxXOffset;\r\n\t            }\r\n\t            var sum = 0;\r\n\t            var min = 0xFF;\r\n\t            var max = 0;\r\n\t            for (var yy = 0, offset = yoffset * width + xoffset; yy < BLOCK_SIZE; yy++, offset += width) {\r\n\t                for (var xx = 0; xx < BLOCK_SIZE; xx++) {\r\n\t                    var pixel = luminances[offset + xx] & 0xFF;\r\n\t                    // still looking for good contrast\r\n\t                    sum += pixel;\r\n\t                    if (pixel < min) {\r\n\t                        min = pixel;\r\n\t                    }\r\n\t                    if (pixel > max) {\r\n\t                        max = pixel;\r\n\t                    }\r\n\t                }\r\n\t                // short-circuit min/max tests once dynamic range is met\r\n\t                if (max - min > MIN_DYNAMIC_RANGE) {\r\n\t                    // finish the rest of the rows quickly\r\n\t                    for (yy++, offset += width; yy < BLOCK_SIZE; yy++, offset += width) {\r\n\t                        for (var xx = 0; xx < BLOCK_SIZE; xx++) {\r\n\t                            sum += luminances[offset + xx] & 0xFF;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            // The default estimate is the average of the values in the block.\r\n\t            var average = sum >> (BLOCK_SIZE_POWER * 2);\r\n\t            if (max - min <= MIN_DYNAMIC_RANGE) {\r\n\t                // If variation within the block is low, assume this is a block with only light or only\r\n\t                // dark pixels. In that case we do not want to use the average, as it would divide this\r\n\t                // low contrast area into black and white pixels, essentially creating data out of noise.\r\n\t                //\r\n\t                // The default assumption is that the block is light/background. Since no estimate for\r\n\t                // the level of dark pixels exists locally, use half the min for the block.\r\n\t                average = min >> 1;\r\n\t                if (y > 0 && x > 0) {\r\n\t                    // Correct the \"white background\" assumption for blocks that have neighbors by comparing\r\n\t                    // the pixels in this block to the previously calculated black points. This is based on\r\n\t                    // the fact that dark barcode symbology is always surrounded by some amount of light\r\n\t                    // background for which reasonable black point estimates were made. The bp estimated at\r\n\t                    // the boundaries is used for the interior.\r\n\t                    // The (min < bp) is arbitrary but works better than other heuristics that were tried.\r\n\t                    var averageNeighborBlackPoint = (blackPoints[y - 1][x] + (2 * blackPoints[y][x - 1]) + blackPoints[y - 1][x - 1]) >> 2;\r\n\t                    if (min < averageNeighborBlackPoint) {\r\n\t                        average = averageNeighborBlackPoint;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            blackPoints[y][x] = average;\r\n\t        }\r\n\t    }\r\n\t    return blackPoints;\r\n\t}\r\n\tfunction calculateThresholdForBlock(luminances, subWidth, subHeight, width, height, blackPoints) {\r\n\t    function cap(value, min, max) {\r\n\t        return value < min ? min : value > max ? max : value;\r\n\t    }\r\n\t    // var outArray = new Array(width * height);\r\n\t    var outMatrix = bitmatrix_1.BitMatrix.createEmpty(width, height);\r\n\t    function thresholdBlock(luminances, xoffset, yoffset, threshold, stride) {\r\n\t        var offset = (yoffset * stride) + xoffset;\r\n\t        for (var y = 0; y < BLOCK_SIZE; y++, offset += stride) {\r\n\t            for (var x = 0; x < BLOCK_SIZE; x++) {\r\n\t                var pixel = luminances[offset + x] & 0xff;\r\n\t                // Comparison needs to be <= so that black == 0 pixels are black even if the threshold is 0.\r\n\t                outMatrix.set(xoffset + x, yoffset + y, pixel <= threshold);\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    for (var y = 0; y < subHeight; y++) {\r\n\t        var yoffset = y << BLOCK_SIZE_POWER;\r\n\t        var maxYOffset = height - BLOCK_SIZE;\r\n\t        if (yoffset > maxYOffset) {\r\n\t            yoffset = maxYOffset;\r\n\t        }\r\n\t        for (var x = 0; x < subWidth; x++) {\r\n\t            var xoffset = x << BLOCK_SIZE_POWER;\r\n\t            var maxXOffset = width - BLOCK_SIZE;\r\n\t            if (xoffset > maxXOffset) {\r\n\t                xoffset = maxXOffset;\r\n\t            }\r\n\t            var left = cap(x, 2, subWidth - 3);\r\n\t            var top = cap(y, 2, subHeight - 3);\r\n\t            var sum = 0;\r\n\t            for (var z = -2; z <= 2; z++) {\r\n\t                var blackRow = blackPoints[top + z];\r\n\t                sum += blackRow[left - 2];\r\n\t                sum += blackRow[left - 1];\r\n\t                sum += blackRow[left];\r\n\t                sum += blackRow[left + 1];\r\n\t                sum += blackRow[left + 2];\r\n\t            }\r\n\t            var average = sum / 25;\r\n\t            thresholdBlock(luminances, xoffset, yoffset, average, width);\r\n\t        }\r\n\t    }\r\n\t    return outMatrix;\r\n\t}\r\n\tfunction binarize(data, width, height) {\r\n\t    if (data.length !== width * height * 4) {\r\n\t        throw new Error(\"Binarizer data.length != width * height * 4\");\r\n\t    }\r\n\t    var gsArray = new Array(width * height);\r\n\t    for (var x = 0; x < width; x++) {\r\n\t        for (var y = 0; y < height; y++) {\r\n\t            var startIndex = (y * width + x) * 4;\r\n\t            var r = data[startIndex];\r\n\t            var g = data[startIndex + 1];\r\n\t            var b = data[startIndex + 2];\r\n\t            // Magic lumosity constants\r\n\t            var lum = 0.2126 * r + 0.7152 * g + 0.0722 * b;\r\n\t            gsArray[y * width + x] = lum;\r\n\t        }\r\n\t    }\r\n\t    var subWidth = width >> BLOCK_SIZE_POWER;\r\n\t    if ((width & BLOCK_SIZE_MASK) != 0) {\r\n\t        subWidth++;\r\n\t    }\r\n\t    var subHeight = height >> BLOCK_SIZE_POWER;\r\n\t    if ((height & BLOCK_SIZE_MASK) != 0) {\r\n\t        subHeight++;\r\n\t    }\r\n\t    var blackPoints = calculateBlackPoints(gsArray, subWidth, subHeight, width, height);\r\n\t    return calculateThresholdForBlock(gsArray, subWidth, subHeight, width, height, blackPoints);\r\n\t}\r\n\texports.binarize = binarize;\r\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar BitMatrix = (function () {\r\n\t    function BitMatrix(data, width) {\r\n\t        this.width = width;\r\n\t        this.height = data.length / width;\r\n\t        this.data = data;\r\n\t    }\r\n\t    BitMatrix.createEmpty = function (width, height) {\r\n\t        var data = new Array(width * height);\r\n\t        for (var i = 0; i < data.length; i++) {\r\n\t            data[i] = false;\r\n\t        }\r\n\t        return new BitMatrix(data, width);\r\n\t    };\r\n\t    BitMatrix.prototype.get = function (x, y) {\r\n\t        return this.data[y * this.width + x];\r\n\t    };\r\n\t    BitMatrix.prototype.set = function (x, y, v) {\r\n\t        this.data[y * this.width + x] = v;\r\n\t    };\r\n\t    BitMatrix.prototype.copyBit = function (x, y, versionBits) {\r\n\t        return this.get(x, y) ? (versionBits << 1) | 0x1 : versionBits << 1;\r\n\t    };\r\n\t    BitMatrix.prototype.setRegion = function (left, top, width, height) {\r\n\t        var right = left + width;\r\n\t        var bottom = top + height;\r\n\t        for (var y = top; y < bottom; y++) {\r\n\t            for (var x = left; x < right; x++) {\r\n\t                this.set(x, y, true);\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    BitMatrix.prototype.mirror = function () {\r\n\t        for (var x = 0; x < this.width; x++) {\r\n\t            for (var y = x + 1; y < this.height; y++) {\r\n\t                if (this.get(x, y) != this.get(y, x)) {\r\n\t                    this.set(x, y, !this.get(x, y));\r\n\t                    this.set(y, x, !this.get(y, x));\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    };\r\n\t    return BitMatrix;\r\n\t}());\r\n\texports.BitMatrix = BitMatrix;\r\n\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar CENTER_QUORUM = 2;\r\n\tvar MIN_SKIP = 3;\r\n\tvar MAX_MODULES = 57;\r\n\tvar INTEGER_MATH_SHIFT = 8;\r\n\tvar FinderPattern = (function () {\r\n\t    function FinderPattern(x, y, estimatedModuleSize, count) {\r\n\t        this.x = x;\r\n\t        this.y = y;\r\n\t        this.estimatedModuleSize = estimatedModuleSize;\r\n\t        if (count == null) {\r\n\t            this.count = 1;\r\n\t        }\r\n\t        else {\r\n\t            this.count = count;\r\n\t        }\r\n\t    }\r\n\t    FinderPattern.prototype.aboutEquals = function (moduleSize, i, j) {\r\n\t        if (Math.abs(i - this.y) <= moduleSize && Math.abs(j - this.x) <= moduleSize) {\r\n\t            var moduleSizeDiff = Math.abs(moduleSize - this.estimatedModuleSize);\r\n\t            return moduleSizeDiff <= 1.0 || moduleSizeDiff <= this.estimatedModuleSize;\r\n\t        }\r\n\t        return false;\r\n\t    };\r\n\t    FinderPattern.prototype.combineEstimate = function (i, j, newModuleSize) {\r\n\t        var combinedCount = this.count + 1;\r\n\t        var combinedX = (this.count * this.x + j) / combinedCount;\r\n\t        var combinedY = (this.count * this.y + i) / combinedCount;\r\n\t        var combinedModuleSize = (this.count * this.estimatedModuleSize + newModuleSize) / combinedCount;\r\n\t        return new FinderPattern(combinedX, combinedY, combinedModuleSize, combinedCount);\r\n\t    };\r\n\t    return FinderPattern;\r\n\t}());\r\n\tfunction foundPatternCross(stateCount) {\r\n\t    var totalModuleSize = 0;\r\n\t    for (var i = 0; i < 5; i++) {\r\n\t        var count = stateCount[i];\r\n\t        if (count === 0)\r\n\t            return false;\r\n\t        totalModuleSize += count;\r\n\t    }\r\n\t    if (totalModuleSize < 7)\r\n\t        return false;\r\n\t    var moduleSize = (totalModuleSize << INTEGER_MATH_SHIFT) / 7;\r\n\t    var maxVariance = moduleSize / 2;\r\n\t    // Allow less than 50% variance from 1-1-3-1-1 proportions\r\n\t    return Math.abs(moduleSize - (stateCount[0] << INTEGER_MATH_SHIFT)) < maxVariance &&\r\n\t        Math.abs(moduleSize - (stateCount[1] << INTEGER_MATH_SHIFT)) < maxVariance &&\r\n\t        Math.abs(3 * moduleSize - (stateCount[2] << INTEGER_MATH_SHIFT)) < 3 * maxVariance &&\r\n\t        Math.abs(moduleSize - (stateCount[3] << INTEGER_MATH_SHIFT)) < maxVariance &&\r\n\t        Math.abs(moduleSize - (stateCount[4] << INTEGER_MATH_SHIFT)) < maxVariance;\r\n\t}\r\n\tfunction centerFromEnd(stateCount, end) {\r\n\t    var result = (end - stateCount[4] - stateCount[3]) - stateCount[2] / 2;\r\n\t    // Fix this.\r\n\t    if (result !== result) {\r\n\t        return null;\r\n\t    }\r\n\t    return result;\r\n\t}\r\n\tfunction distance(pattern1, pattern2) {\r\n\t    var a = pattern1.x - pattern2.x;\r\n\t    var b = pattern1.y - pattern2.y;\r\n\t    return Math.sqrt(a * a + b * b);\r\n\t}\r\n\tfunction crossProductZ(pointA, pointB, pointC) {\r\n\t    var bX = pointB.x;\r\n\t    var bY = pointB.y;\r\n\t    return ((pointC.x - bX) * (pointA.y - bY)) - ((pointC.y - bY) * (pointA.x - bX));\r\n\t}\r\n\tfunction ReorderFinderPattern(patterns) {\r\n\t    // Find distances between pattern centers\r\n\t    var zeroOneDistance = distance(patterns[0], patterns[1]);\r\n\t    var oneTwoDistance = distance(patterns[1], patterns[2]);\r\n\t    var zeroTwoDistance = distance(patterns[0], patterns[2]);\r\n\t    var pointA, pointB, pointC;\r\n\t    // Assume one closest to other two is B; A and C will just be guesses at first\r\n\t    if (oneTwoDistance >= zeroOneDistance && oneTwoDistance >= zeroTwoDistance) {\r\n\t        pointB = patterns[0];\r\n\t        pointA = patterns[1];\r\n\t        pointC = patterns[2];\r\n\t    }\r\n\t    else if (zeroTwoDistance >= oneTwoDistance && zeroTwoDistance >= zeroOneDistance) {\r\n\t        pointB = patterns[1];\r\n\t        pointA = patterns[0];\r\n\t        pointC = patterns[2];\r\n\t    }\r\n\t    else {\r\n\t        pointB = patterns[2];\r\n\t        pointA = patterns[0];\r\n\t        pointC = patterns[1];\r\n\t    }\r\n\t    // Use cross product to figure out whether A and C are correct or flipped.\r\n\t    // This asks whether BC x BA has a positive z component, which is the arrangement\r\n\t    // we want for A, B, C. If it's negative, then we've got it flipped around and\r\n\t    // should swap A and C.\r\n\t    if (crossProductZ(pointA, pointB, pointC) < 0) {\r\n\t        var temp = pointA;\r\n\t        pointA = pointC;\r\n\t        pointC = temp;\r\n\t    }\r\n\t    return {\r\n\t        bottomLeft: { x: pointA.x, y: pointA.y },\r\n\t        topLeft: { x: pointB.x, y: pointB.y },\r\n\t        topRight: { x: pointC.x, y: pointC.y }\r\n\t    };\r\n\t}\r\n\tfunction locate(matrix) {\r\n\t    // Global state :(\r\n\t    var possibleCenters = [];\r\n\t    var hasSkipped = false;\r\n\t    function get(x, y) {\r\n\t        x = Math.floor(x);\r\n\t        y = Math.floor(y);\r\n\t        return matrix.get(x, y);\r\n\t    }\r\n\t    // Methods\r\n\t    function crossCheckDiagonal(startI, centerJ, maxCount, originalStateCountTotal) {\r\n\t        var maxI = matrix.height;\r\n\t        var maxJ = matrix.width;\r\n\t        var stateCount = [0, 0, 0, 0, 0];\r\n\t        // Start counting up, left from center finding black center mass\r\n\t        var i = 0;\r\n\t        while (startI - i >= 0 && get(centerJ - i, startI - i)) {\r\n\t            stateCount[2]++;\r\n\t            i++;\r\n\t        }\r\n\t        if ((startI - i < 0) || (centerJ - i < 0)) {\r\n\t            return false;\r\n\t        }\r\n\t        // Continue up, left finding white space\r\n\t        while ((startI - i >= 0) && (centerJ - i >= 0) && !get(centerJ - i, startI - i) && stateCount[1] <= maxCount) {\r\n\t            stateCount[1]++;\r\n\t            i++;\r\n\t        }\r\n\t        // If already too many modules in this state or ran off the edge:\r\n\t        if ((startI - i < 0) || (centerJ - i < 0) || stateCount[1] > maxCount) {\r\n\t            return false;\r\n\t        }\r\n\t        // Continue up, left finding black border\r\n\t        while ((startI - i >= 0) && (centerJ - i >= 0) && get(centerJ - i, startI - i) && stateCount[0] <= maxCount) {\r\n\t            stateCount[0]++;\r\n\t            i++;\r\n\t        }\r\n\t        if (stateCount[0] > maxCount) {\r\n\t            return false;\r\n\t        }\r\n\t        // Now also count down, right from center\r\n\t        i = 1;\r\n\t        while ((startI + i < maxI) && (centerJ + i < maxJ) && get(centerJ + i, startI + i)) {\r\n\t            stateCount[2]++;\r\n\t            i++;\r\n\t        }\r\n\t        // Ran off the edge?\r\n\t        if ((startI + i >= maxI) || (centerJ + i >= maxJ)) {\r\n\t            return false;\r\n\t        }\r\n\t        while ((startI + i < maxI) && (centerJ + i < maxJ) && !get(centerJ + i, startI + i) && stateCount[3] < maxCount) {\r\n\t            stateCount[3]++;\r\n\t            i++;\r\n\t        }\r\n\t        if ((startI + i >= maxI) || (centerJ + i >= maxJ) || stateCount[3] >= maxCount) {\r\n\t            return false;\r\n\t        }\r\n\t        while ((startI + i < maxI) && (centerJ + i < maxJ) && get(centerJ + i, startI + i) && stateCount[4] < maxCount) {\r\n\t            stateCount[4]++;\r\n\t            i++;\r\n\t        }\r\n\t        if (stateCount[4] >= maxCount) {\r\n\t            return false;\r\n\t        }\r\n\t        // If we found a finder-pattern-like section, but its size is more than 100% different than\r\n\t        // the original, assume it's a false positive\r\n\t        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\r\n\t        return Math.abs(stateCountTotal - originalStateCountTotal) < 2 * originalStateCountTotal &&\r\n\t            foundPatternCross(stateCount);\r\n\t    }\r\n\t    function crossCheckVertical(startI, centerJ, maxCount, originalStateCountTotal) {\r\n\t        var maxI = matrix.height;\r\n\t        var stateCount = [0, 0, 0, 0, 0];\r\n\t        // Start counting up from center\r\n\t        var i = startI;\r\n\t        while (i >= 0 && get(centerJ, i)) {\r\n\t            stateCount[2]++;\r\n\t            i--;\r\n\t        }\r\n\t        if (i < 0) {\r\n\t            return null;\r\n\t        }\r\n\t        while (i >= 0 && !get(centerJ, i) && stateCount[1] <= maxCount) {\r\n\t            stateCount[1]++;\r\n\t            i--;\r\n\t        }\r\n\t        // If already too many modules in this state or ran off the edge:\r\n\t        if (i < 0 || stateCount[1] > maxCount) {\r\n\t            return null;\r\n\t        }\r\n\t        while (i >= 0 && get(centerJ, i) && stateCount[0] <= maxCount) {\r\n\t            stateCount[0]++;\r\n\t            i--;\r\n\t        }\r\n\t        if (stateCount[0] > maxCount) {\r\n\t            return null;\r\n\t        }\r\n\t        // Now also count down from center\r\n\t        i = startI + 1;\r\n\t        while (i < maxI && get(centerJ, i)) {\r\n\t            stateCount[2]++;\r\n\t            i++;\r\n\t        }\r\n\t        if (i == maxI) {\r\n\t            return null;\r\n\t        }\r\n\t        while (i < maxI && !get(centerJ, i) && stateCount[3] < maxCount) {\r\n\t            stateCount[3]++;\r\n\t            i++;\r\n\t        }\r\n\t        if (i == maxI || stateCount[3] >= maxCount) {\r\n\t            return null;\r\n\t        }\r\n\t        while (i < maxI && get(centerJ, i) && stateCount[4] < maxCount) {\r\n\t            stateCount[4]++;\r\n\t            i++;\r\n\t        }\r\n\t        if (stateCount[4] >= maxCount) {\r\n\t            return null;\r\n\t        }\r\n\t        // If we found a finder-pattern-like section, but its size is more than 40% different than\r\n\t        // the original, assume it's a false positive\r\n\t        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\r\n\t        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\r\n\t            return null;\r\n\t        }\r\n\t        return foundPatternCross(stateCount) ? centerFromEnd(stateCount, i) : null;\r\n\t    }\r\n\t    function haveMultiplyConfirmedCenters() {\r\n\t        var confirmedCount = 0;\r\n\t        var totalModuleSize = 0;\r\n\t        var max = possibleCenters.length;\r\n\t        possibleCenters.forEach(function (pattern) {\r\n\t            if (pattern.count >= CENTER_QUORUM) {\r\n\t                confirmedCount++;\r\n\t                totalModuleSize += pattern.estimatedModuleSize;\r\n\t            }\r\n\t        });\r\n\t        if (confirmedCount < 3) {\r\n\t            return false;\r\n\t        }\r\n\t        // OK, we have at least 3 confirmed centers, but, it's possible that one is a \"false positive\"\r\n\t        // and that we need to keep looking. We detect this by asking if the estimated module sizes\r\n\t        // vary too much. We arbitrarily say that when the total deviation from average exceeds\r\n\t        // 5% of the total module size estimates, it's too much.\r\n\t        var average = totalModuleSize / max;\r\n\t        var totalDeviation = 0;\r\n\t        for (var i = 0; i < max; i++) {\r\n\t            var pattern = possibleCenters[i];\r\n\t            totalDeviation += Math.abs(pattern.estimatedModuleSize - average);\r\n\t        }\r\n\t        return totalDeviation <= 0.05 * totalModuleSize;\r\n\t    }\r\n\t    function crossCheckHorizontal(startJ, centerI, maxCount, originalStateCountTotal) {\r\n\t        var maxJ = matrix.width;\r\n\t        var stateCount = [0, 0, 0, 0, 0];\r\n\t        var j = startJ;\r\n\t        while (j >= 0 && get(j, centerI)) {\r\n\t            stateCount[2]++;\r\n\t            j--;\r\n\t        }\r\n\t        if (j < 0) {\r\n\t            return null;\r\n\t        }\r\n\t        while (j >= 0 && !get(j, centerI) && stateCount[1] <= maxCount) {\r\n\t            stateCount[1]++;\r\n\t            j--;\r\n\t        }\r\n\t        if (j < 0 || stateCount[1] > maxCount) {\r\n\t            return null;\r\n\t        }\r\n\t        while (j >= 0 && get(j, centerI) && stateCount[0] <= maxCount) {\r\n\t            stateCount[0]++;\r\n\t            j--;\r\n\t        }\r\n\t        if (stateCount[0] > maxCount) {\r\n\t            return null;\r\n\t        }\r\n\t        j = startJ + 1;\r\n\t        while (j < maxJ && get(j, centerI)) {\r\n\t            stateCount[2]++;\r\n\t            j++;\r\n\t        }\r\n\t        if (j == maxJ) {\r\n\t            return null;\r\n\t        }\r\n\t        while (j < maxJ && !get(j, centerI) && stateCount[3] < maxCount) {\r\n\t            stateCount[3]++;\r\n\t            j++;\r\n\t        }\r\n\t        if (j == maxJ || stateCount[3] >= maxCount) {\r\n\t            return null;\r\n\t        }\r\n\t        while (j < maxJ && get(j, centerI) && stateCount[4] < maxCount) {\r\n\t            stateCount[4]++;\r\n\t            j++;\r\n\t        }\r\n\t        if (stateCount[4] >= maxCount) {\r\n\t            return null;\r\n\t        }\r\n\t        // If we found a finder-pattern-like section, but its size is significantly different than\r\n\t        // the original, assume it's a false positive\r\n\t        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\r\n\t        if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= originalStateCountTotal) {\r\n\t            return null;\r\n\t        }\r\n\t        return foundPatternCross(stateCount) ? centerFromEnd(stateCount, j) : null;\r\n\t    }\r\n\t    function handlePossibleCenter(stateCount, i, j, pureBarcode) {\r\n\t        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2] + stateCount[3] + stateCount[4];\r\n\t        var centerJ = centerFromEnd(stateCount, j);\r\n\t        if (centerJ == null)\r\n\t            return false;\r\n\t        var centerI = crossCheckVertical(i, Math.floor(centerJ), stateCount[2], stateCountTotal);\r\n\t        if (centerI != null) {\r\n\t            // Re-cross check\r\n\t            centerJ = crossCheckHorizontal(Math.floor(centerJ), Math.floor(centerI), stateCount[2], stateCountTotal);\r\n\t            if (centerJ != null && (!pureBarcode || crossCheckDiagonal(Math.floor(centerI), Math.floor(centerJ), stateCount[2], stateCountTotal))) {\r\n\t                var estimatedModuleSize = stateCountTotal / 7;\r\n\t                var found = false;\r\n\t                for (var index = 0; index < possibleCenters.length; index++) {\r\n\t                    var center = possibleCenters[index];\r\n\t                    // Look for about the same center and module size:\r\n\t                    if (center.aboutEquals(estimatedModuleSize, centerI, centerJ)) {\r\n\t                        possibleCenters.splice(index, 1, center.combineEstimate(centerI, centerJ, estimatedModuleSize));\r\n\t                        found = true;\r\n\t                        break;\r\n\t                    }\r\n\t                }\r\n\t                if (!found) {\r\n\t                    // var point = new FinderPattern(centerJ.Value, centerI.Value, estimatedModuleSize);\r\n\t                    var point = new FinderPattern(centerJ, centerI, estimatedModuleSize);\r\n\t                    possibleCenters.push(point);\r\n\t                }\r\n\t                return true;\r\n\t            }\r\n\t        }\r\n\t        return false;\r\n\t    }\r\n\t    function findRowSkip() {\r\n\t        var max = possibleCenters.length;\r\n\t        if (max <= 1) {\r\n\t            return 0;\r\n\t        }\r\n\t        var firstConfirmedCenter = null;\r\n\t        possibleCenters.forEach(function (center) {\r\n\t            if (center.count >= CENTER_QUORUM) {\r\n\t                if (firstConfirmedCenter == null) {\r\n\t                    firstConfirmedCenter = center;\r\n\t                }\r\n\t                else {\r\n\t                    // We have two confirmed centers\r\n\t                    // How far down can we skip before resuming looking for the next\r\n\t                    // pattern? In the worst case, only the difference between the\r\n\t                    // difference in the x / y coordinates of the two centers.\r\n\t                    // This is the case where you find top left last.\r\n\t                    hasSkipped = true;\r\n\t                    //UPGRADE_WARNING: Data types in Visual C# might be different.  Verify the accuracy of narrowing conversions. \"ms-help://MS.VSCC.v80/dv_commoner/local/redirect.htm?index='!DefaultContextWindowIndex'&keyword='jlca1042'\"\r\n\t                    return Math.floor(Math.abs(firstConfirmedCenter.x - center.x) - Math.abs(firstConfirmedCenter.y - center.y)) / 2;\r\n\t                }\r\n\t            }\r\n\t        });\r\n\t        return 0;\r\n\t    }\r\n\t    function selectBestPatterns() {\r\n\t        var startSize = possibleCenters.length;\r\n\t        if (startSize < 3) {\r\n\t            // Couldn't find enough finder patterns\r\n\t            return null;\r\n\t        }\r\n\t        // Filter outlier possibilities whose module size is too different\r\n\t        if (startSize > 3) {\r\n\t            // But we can only afford to do so if we have at least 4 possibilities to choose from\r\n\t            var totalModuleSize = 0;\r\n\t            var square = 0;\r\n\t            possibleCenters.forEach(function (center) {\r\n\t                var size = center.estimatedModuleSize;\r\n\t                totalModuleSize += size;\r\n\t                square += size * size;\r\n\t            });\r\n\t            var average = totalModuleSize / startSize;\r\n\t            var stdDev = Math.sqrt(square / startSize - average * average);\r\n\t            //possibleCenters.Sort(new FurthestFromAverageComparator(average));\r\n\t            possibleCenters.sort(function (x, y) {\r\n\t                var dA = Math.abs(y.estimatedModuleSize - average);\r\n\t                var dB = Math.abs(x.estimatedModuleSize - average);\r\n\t                return dA < dB ? -1 : dA == dB ? 0 : 1;\r\n\t            });\r\n\t            var limit = Math.max(0.2 * average, stdDev);\r\n\t            for (var i = 0; i < possibleCenters.length && possibleCenters.length > 3; i++) {\r\n\t                var pattern = possibleCenters[i];\r\n\t                if (Math.abs(pattern.estimatedModuleSize - average) > limit) {\r\n\t                    possibleCenters.splice(i, 1);\r\n\t                    ///possibleCenters.RemoveAt(i);\r\n\t                    i--;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        if (possibleCenters.length > 3) {\r\n\t            // Throw away all but those first size candidate points we found.\r\n\t            var totalModuleSize = 0;\r\n\t            possibleCenters.forEach(function (possibleCenter) {\r\n\t                totalModuleSize += possibleCenter.estimatedModuleSize;\r\n\t            });\r\n\t            var average = totalModuleSize / possibleCenters.length;\r\n\t            // possibleCenters.Sort(new CenterComparator(average));\r\n\t            possibleCenters.sort(function (x, y) {\r\n\t                if (y.count === x.count) {\r\n\t                    var dA = Math.abs(y.estimatedModuleSize - average);\r\n\t                    var dB = Math.abs(x.estimatedModuleSize - average);\r\n\t                    return dA < dB ? 1 : dA == dB ? 0 : -1;\r\n\t                }\r\n\t                return y.count - x.count;\r\n\t            });\r\n\t            //possibleCenters.subList(3, possibleCenters.Count).clear();\r\n\t            ///possibleCenters = possibleCenters.GetRange(0, 3);\r\n\t            possibleCenters = possibleCenters.slice(0, 3);\r\n\t        }\r\n\t        return [possibleCenters[0], possibleCenters[1], possibleCenters[2]];\r\n\t    }\r\n\t    var pureBarcode = false;\r\n\t    var maxI = matrix.height;\r\n\t    var maxJ = matrix.width;\r\n\t    var iSkip = Math.floor((3 * maxI) / (4 * MAX_MODULES));\r\n\t    if (iSkip < MIN_SKIP || false) {\r\n\t        iSkip = MIN_SKIP;\r\n\t    }\r\n\t    var done = false;\r\n\t    var stateCount = [0, 0, 0, 0, 0];\r\n\t    for (var i = iSkip - 1; i < maxI && !done; i += iSkip) {\r\n\t        stateCount = [0, 0, 0, 0, 0];\r\n\t        var currentState = 0;\r\n\t        for (var j = 0; j < maxJ; j++) {\r\n\t            if (get(j, i)) {\r\n\t                // Black pixel\r\n\t                if ((currentState & 1) === 1) {\r\n\t                    currentState++;\r\n\t                }\r\n\t                stateCount[currentState]++;\r\n\t            }\r\n\t            else {\r\n\t                // White pixel\r\n\t                if ((currentState & 1) === 0) {\r\n\t                    // Counting black pixels\r\n\t                    if (currentState === 4) {\r\n\t                        // A winner?\r\n\t                        if (foundPatternCross(stateCount)) {\r\n\t                            // Yes\r\n\t                            var confirmed = handlePossibleCenter(stateCount, i, j, pureBarcode);\r\n\t                            if (confirmed) {\r\n\t                                // Start examining every other line. Checking each line turned out to be too\r\n\t                                // expensive and didn't improve performance.\r\n\t                                iSkip = 2;\r\n\t                                if (hasSkipped) {\r\n\t                                    done = haveMultiplyConfirmedCenters();\r\n\t                                }\r\n\t                                else {\r\n\t                                    var rowSkip = findRowSkip();\r\n\t                                    if (rowSkip > stateCount[2]) {\r\n\t                                        // Skip rows between row of lower confirmed center\r\n\t                                        // and top of presumed third confirmed center\r\n\t                                        // but back up a bit to get a full chance of detecting\r\n\t                                        // it, entire width of center of finder pattern\r\n\t                                        // Skip by rowSkip, but back off by stateCount[2] (size of last center\r\n\t                                        // of pattern we saw) to be conservative, and also back off by iSkip which\r\n\t                                        // is about to be re-added\r\n\t                                        i += rowSkip - stateCount[2] - iSkip;\r\n\t                                        j = maxJ - 1;\r\n\t                                    }\r\n\t                                }\r\n\t                            }\r\n\t                            else {\r\n\t                                stateCount = [stateCount[2], stateCount[3], stateCount[4], 1, 0];\r\n\t                                currentState = 3;\r\n\t                                continue;\r\n\t                            }\r\n\t                            // Clear state to start looking again\r\n\t                            stateCount = [0, 0, 0, 0, 0];\r\n\t                            currentState = 0;\r\n\t                        }\r\n\t                        else {\r\n\t                            stateCount = [stateCount[2], stateCount[3], stateCount[4], 1, 0];\r\n\t                            currentState = 3;\r\n\t                        }\r\n\t                    }\r\n\t                    else {\r\n\t                        // Should I really have copy/pasted this fuckery?\r\n\t                        stateCount[++currentState]++;\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    // Counting the white pixels\r\n\t                    stateCount[currentState]++;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        if (foundPatternCross(stateCount)) {\r\n\t            var confirmed = handlePossibleCenter(stateCount, i, maxJ, pureBarcode);\r\n\t            if (confirmed) {\r\n\t                iSkip = stateCount[0];\r\n\t                if (hasSkipped) {\r\n\t                    // Found a third one\r\n\t                    done = haveMultiplyConfirmedCenters();\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    var patternInfo = selectBestPatterns();\r\n\t    if (!patternInfo)\r\n\t        return null;\r\n\t    return ReorderFinderPattern(patternInfo);\r\n\t}\r\n\texports.locate = locate;\r\n\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\t/// <reference path=\"../common/types.d.ts\" />\r\n\tvar alignment_finder_1 = __webpack_require__(5);\r\n\tvar perspective_transform_1 = __webpack_require__(7);\r\n\tvar version_1 = __webpack_require__(8);\r\n\tvar bitmatrix_1 = __webpack_require__(2);\r\n\tvar helpers_1 = __webpack_require__(6);\r\n\tfunction checkAndNudgePoints(width, height, points) {\r\n\t    // Check and nudge points from start until we see some that are OK:\r\n\t    var nudged = true;\r\n\t    for (var offset = 0; offset < points.length && nudged; offset += 2) {\r\n\t        var x = Math.floor(points[offset]);\r\n\t        var y = Math.floor(points[offset + 1]);\r\n\t        if (x < -1 || x > width || y < -1 || y > height) {\r\n\t            throw new Error();\r\n\t        }\r\n\t        nudged = false;\r\n\t        if (x == -1) {\r\n\t            points[offset] = 0;\r\n\t            nudged = true;\r\n\t        }\r\n\t        else if (x == width) {\r\n\t            points[offset] = width - 1;\r\n\t            nudged = true;\r\n\t        }\r\n\t        if (y == -1) {\r\n\t            points[offset + 1] = 0;\r\n\t            nudged = true;\r\n\t        }\r\n\t        else if (y == height) {\r\n\t            points[offset + 1] = height - 1;\r\n\t            nudged = true;\r\n\t        }\r\n\t    }\r\n\t    // Check and nudge points from end:\r\n\t    nudged = true;\r\n\t    for (var offset = points.length - 2; offset >= 0 && nudged; offset -= 2) {\r\n\t        var x = Math.floor(points[offset]);\r\n\t        var y = Math.floor(points[offset + 1]);\r\n\t        if (x < -1 || x > width || y < -1 || y > height) {\r\n\t            throw new Error();\r\n\t        }\r\n\t        nudged = false;\r\n\t        if (x == -1) {\r\n\t            points[offset] = 0;\r\n\t            nudged = true;\r\n\t        }\r\n\t        else if (x == width) {\r\n\t            points[offset] = width - 1;\r\n\t            nudged = true;\r\n\t        }\r\n\t        if (y == -1) {\r\n\t            points[offset + 1] = 0;\r\n\t            nudged = true;\r\n\t        }\r\n\t        else if (y == height) {\r\n\t            points[offset + 1] = height - 1;\r\n\t            nudged = true;\r\n\t        }\r\n\t    }\r\n\t    return points;\r\n\t}\r\n\tfunction bitArrayFromImage(image, dimension, transform) {\r\n\t    if (dimension <= 0) {\r\n\t        return null;\r\n\t    }\r\n\t    var bits = bitmatrix_1.BitMatrix.createEmpty(dimension, dimension);\r\n\t    var points = new Array(dimension << 1);\r\n\t    for (var y = 0; y < dimension; y++) {\r\n\t        var max = points.length;\r\n\t        var iValue = y + 0.5;\r\n\t        for (var x = 0; x < max; x += 2) {\r\n\t            points[x] = (x >> 1) + 0.5;\r\n\t            points[x + 1] = iValue;\r\n\t        }\r\n\t        points = perspective_transform_1.transformPoints(transform, points);\r\n\t        // Quick check to see if points transformed to something inside the image;\r\n\t        // sufficient to check the endpoints\r\n\t        try {\r\n\t            var nudgedPoints = checkAndNudgePoints(image.width, image.height, points);\r\n\t        }\r\n\t        catch (e) {\r\n\t            return null;\r\n\t        }\r\n\t        // try {\r\n\t        for (var x = 0; x < max; x += 2) {\r\n\t            bits.set(x >> 1, y, image.get(Math.floor(nudgedPoints[x]), Math.floor(nudgedPoints[x + 1])));\r\n\t        }\r\n\t    }\r\n\t    return bits;\r\n\t}\r\n\tfunction createTransform(topLeft, topRight, bottomLeft, alignmentPattern, dimension) {\r\n\t    var dimMinusThree = dimension - 3.5;\r\n\t    var bottomRightX;\r\n\t    var bottomRightY;\r\n\t    var sourceBottomRightX;\r\n\t    var sourceBottomRightY;\r\n\t    if (alignmentPattern != null) {\r\n\t        bottomRightX = alignmentPattern.x;\r\n\t        bottomRightY = alignmentPattern.y;\r\n\t        sourceBottomRightX = sourceBottomRightY = dimMinusThree - 3;\r\n\t    }\r\n\t    else {\r\n\t        // Don't have an alignment pattern, just make up the bottom-right point\r\n\t        bottomRightX = (topRight.x - topLeft.x) + bottomLeft.x;\r\n\t        bottomRightY = (topRight.y - topLeft.y) + bottomLeft.y;\r\n\t        sourceBottomRightX = sourceBottomRightY = dimMinusThree;\r\n\t    }\r\n\t    return perspective_transform_1.quadrilateralToQuadrilateral(3.5, 3.5, dimMinusThree, 3.5, sourceBottomRightX, sourceBottomRightY, 3.5, dimMinusThree, topLeft.x, topLeft.y, topRight.x, topRight.y, bottomRightX, bottomRightY, bottomLeft.x, bottomLeft.y);\r\n\t}\r\n\t// Taken from 6th grade algebra\r\n\tfunction distance(x1, y1, x2, y2) {\r\n\t    return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\r\n\t}\r\n\t// Attempts to locate an alignment pattern in a limited region of the image, which is guessed to contain it.\r\n\t// overallEstModuleSize - estimated module size so far\r\n\t// estAlignmentX        - coordinate of center of area probably containing alignment pattern\r\n\t// estAlignmentY        - y coordinate of above</param>\r\n\t// allowanceFactor      - number of pixels in all directions to search from the center</param>\r\n\tfunction findAlignmentInRegion(overallEstModuleSize, estAlignmentX, estAlignmentY, allowanceFactor, image) {\r\n\t    estAlignmentX = Math.floor(estAlignmentX);\r\n\t    estAlignmentY = Math.floor(estAlignmentY);\r\n\t    // Look for an alignment pattern (3 modules in size) around where it should be\r\n\t    var allowance = Math.floor(allowanceFactor * overallEstModuleSize);\r\n\t    var alignmentAreaLeftX = Math.max(0, estAlignmentX - allowance);\r\n\t    var alignmentAreaRightX = Math.min(image.width, estAlignmentX + allowance);\r\n\t    if (alignmentAreaRightX - alignmentAreaLeftX < overallEstModuleSize * 3) {\r\n\t        return null;\r\n\t    }\r\n\t    var alignmentAreaTopY = Math.max(0, estAlignmentY - allowance);\r\n\t    var alignmentAreaBottomY = Math.min(image.height - 1, estAlignmentY + allowance);\r\n\t    return alignment_finder_1.findAlignment(alignmentAreaLeftX, alignmentAreaTopY, alignmentAreaRightX - alignmentAreaLeftX, alignmentAreaBottomY - alignmentAreaTopY, overallEstModuleSize, image);\r\n\t}\r\n\t// Computes the dimension (number of modules on a size) of the QR Code based on the position of the finder\r\n\t// patterns and estimated module size.\r\n\tfunction computeDimension(topLeft, topRight, bottomLeft, moduleSize) {\r\n\t    var tltrCentersDimension = Math.round(distance(topLeft.x, topLeft.y, topRight.x, topRight.y) / moduleSize);\r\n\t    var tlblCentersDimension = Math.round(distance(topLeft.x, topLeft.y, bottomLeft.x, bottomLeft.y) / moduleSize);\r\n\t    var dimension = ((tltrCentersDimension + tlblCentersDimension) >> 1) + 7;\r\n\t    switch (dimension & 0x03) {\r\n\t        // mod 4\r\n\t        case 0:\r\n\t            dimension++;\r\n\t            break;\r\n\t        // 1? do nothing\r\n\t        case 2:\r\n\t            dimension--;\r\n\t            break;\r\n\t    }\r\n\t    return dimension;\r\n\t}\r\n\t// Deduces version information purely from QR Code dimensions.\r\n\t// http://chan.catiewayne.com/z/src/131044167276.jpg\r\n\tfunction getProvisionalVersionForDimension(dimension) {\r\n\t    if (dimension % 4 != 1) {\r\n\t        return null;\r\n\t    }\r\n\t    var versionNumber = (dimension - 17) >> 2;\r\n\t    if (versionNumber < 1 || versionNumber > 40) {\r\n\t        return null;\r\n\t    }\r\n\t    return version_1.getVersionForNumber(versionNumber);\r\n\t}\r\n\t// This method traces a line from a point in the image, in the direction towards another point.\r\n\t// It begins in a black region, and keeps going until it finds white, then black, then white again.\r\n\t// It reports the distance from the start to this point.</p>\r\n\t//\r\n\t// This is used when figuring out how wide a finder pattern is, when the finder pattern\r\n\t// may be skewed or rotated.\r\n\tfunction sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY, image) {\r\n\t    fromX = Math.floor(fromX);\r\n\t    fromY = Math.floor(fromY);\r\n\t    toX = Math.floor(toX);\r\n\t    toY = Math.floor(toY);\r\n\t    // Mild variant of Bresenham's algorithm;\r\n\t    // see http://en.wikipedia.org/wiki/Bresenham's_line_algorithm\r\n\t    var steep = Math.abs(toY - fromY) > Math.abs(toX - fromX);\r\n\t    if (steep) {\r\n\t        var temp = fromX;\r\n\t        fromX = fromY;\r\n\t        fromY = temp;\r\n\t        temp = toX;\r\n\t        toX = toY;\r\n\t        toY = temp;\r\n\t    }\r\n\t    var dx = Math.abs(toX - fromX);\r\n\t    var dy = Math.abs(toY - fromY);\r\n\t    var error = -dx >> 1;\r\n\t    var xstep = fromX < toX ? 1 : -1;\r\n\t    var ystep = fromY < toY ? 1 : -1;\r\n\t    // In black pixels, looking for white, first or second time.\r\n\t    var state = 0;\r\n\t    // Loop up until x == toX, but not beyond\r\n\t    var xLimit = toX + xstep;\r\n\t    for (var x = fromX, y = fromY; x != xLimit; x += xstep) {\r\n\t        var realX = steep ? y : x;\r\n\t        var realY = steep ? x : y;\r\n\t        // Does current pixel mean we have moved white to black or vice versa?\r\n\t        // Scanning black in state 0,2 and white in state 1, so if we find the wrong\r\n\t        // color, advance to next state or end if we are in state 2 already\r\n\t        if ((state == 1) === image.get(realX, realY)) {\r\n\t            if (state == 2) {\r\n\t                return distance(x, y, fromX, fromY);\r\n\t            }\r\n\t            state++;\r\n\t        }\r\n\t        error += dy;\r\n\t        if (error > 0) {\r\n\t            if (y == toY) {\r\n\t                break;\r\n\t            }\r\n\t            y += ystep;\r\n\t            error -= dx;\r\n\t        }\r\n\t    }\r\n\t    // Found black-white-black; give the benefit of the doubt that the next pixel outside the image\r\n\t    // is \"white\" so this last point at (toX+xStep,toY) is the right ending. This is really a\r\n\t    // small approximation; (toX+xStep,toY+yStep) might be really correct. Ignore this.\r\n\t    if (state == 2) {\r\n\t        return distance(toX + xstep, toY, fromX, fromY);\r\n\t    }\r\n\t    // else we didn't find even black-white-black; no estimate is really possible\r\n\t    return NaN;\r\n\t}\r\n\t// Computes the total width of a finder pattern by looking for a black-white-black run from the center\r\n\t// in the direction of another point (another finder pattern center), and in the opposite direction too.\r\n\tfunction sizeOfBlackWhiteBlackRunBothWays(fromX, fromY, toX, toY, image) {\r\n\t    var result = sizeOfBlackWhiteBlackRun(fromX, fromY, toX, toY, image);\r\n\t    // Now count other way -- don't run off image though of course\r\n\t    var scale = 1;\r\n\t    var otherToX = fromX - (toX - fromX);\r\n\t    if (otherToX < 0) {\r\n\t        scale = fromX / (fromX - otherToX);\r\n\t        otherToX = 0;\r\n\t    }\r\n\t    else if (otherToX >= image.width) {\r\n\t        scale = (image.width - 1 - fromX) / (otherToX - fromX);\r\n\t        otherToX = image.width - 1;\r\n\t    }\r\n\t    var otherToY = (fromY - (toY - fromY) * scale);\r\n\t    scale = 1;\r\n\t    if (otherToY < 0) {\r\n\t        scale = fromY / (fromY - otherToY);\r\n\t        otherToY = 0;\r\n\t    }\r\n\t    else if (otherToY >= image.height) {\r\n\t        scale = (image.height - 1 - fromY) / (otherToY - fromY);\r\n\t        otherToY = image.height - 1;\r\n\t    }\r\n\t    otherToX = (fromX + (otherToX - fromX) * scale);\r\n\t    result += sizeOfBlackWhiteBlackRun(fromX, fromY, otherToX, otherToY, image);\r\n\t    return result - 1; // -1 because we counted the middle pixel twice\r\n\t}\r\n\tfunction calculateModuleSizeOneWay(pattern, otherPattern, image) {\r\n\t    var moduleSizeEst1 = sizeOfBlackWhiteBlackRunBothWays(pattern.x, pattern.y, otherPattern.x, otherPattern.y, image);\r\n\t    var moduleSizeEst2 = sizeOfBlackWhiteBlackRunBothWays(otherPattern.x, otherPattern.y, pattern.x, pattern.y, image);\r\n\t    if (helpers_1.isNaN(moduleSizeEst1)) {\r\n\t        return moduleSizeEst2 / 7;\r\n\t    }\r\n\t    if (helpers_1.isNaN(moduleSizeEst2)) {\r\n\t        return moduleSizeEst1 / 7;\r\n\t    }\r\n\t    // Average them, and divide by 7 since we've counted the width of 3 black modules,\r\n\t    // and 1 white and 1 black module on either side. Ergo, divide sum by 14.\r\n\t    return (moduleSizeEst1 + moduleSizeEst2) / 14;\r\n\t}\r\n\t// Computes an average estimated module size based on estimated derived from the positions of the three finder patterns.\r\n\tfunction calculateModuleSize(topLeft, topRight, bottomLeft, image) {\r\n\t    return (calculateModuleSizeOneWay(topLeft, topRight, image) + calculateModuleSizeOneWay(topLeft, bottomLeft, image)) / 2;\r\n\t}\r\n\tfunction extract(image, location) {\r\n\t    var moduleSize = calculateModuleSize(location.topLeft, location.topRight, location.bottomLeft, image);\r\n\t    if (moduleSize < 1) {\r\n\t        return null;\r\n\t    }\r\n\t    var dimension = computeDimension(location.topLeft, location.topRight, location.bottomLeft, moduleSize);\r\n\t    if (!dimension) {\r\n\t        return null;\r\n\t    }\r\n\t    var provisionalVersion = getProvisionalVersionForDimension(dimension);\r\n\t    if (provisionalVersion == null) {\r\n\t        return null;\r\n\t    }\r\n\t    var modulesBetweenFPCenters = provisionalVersion.getDimensionForVersion() - 7;\r\n\t    var alignmentPattern = null;\r\n\t    // Anything above version 1 has an alignment pattern\r\n\t    if (provisionalVersion.alignmentPatternCenters.length > 0) {\r\n\t        // Guess where a \"bottom right\" finder pattern would have been\r\n\t        var bottomRightX = location.topRight.x - location.topLeft.x + location.bottomLeft.x;\r\n\t        var bottomRightY = location.topRight.y - location.topLeft.y + location.bottomLeft.y;\r\n\t        // Estimate that alignment pattern is closer by 3 modules\r\n\t        // from \"bottom right\" to known top left location\r\n\t        var correctionToTopLeft = 1 - 3 / modulesBetweenFPCenters;\r\n\t        var estAlignmentX = location.topLeft.x + correctionToTopLeft * (bottomRightX - location.topLeft.x);\r\n\t        var estAlignmentY = location.topLeft.y + correctionToTopLeft * (bottomRightY - location.topLeft.y);\r\n\t        // Kind of arbitrary -- expand search radius before giving up\r\n\t        for (var i = 4; i <= 16; i <<= 1) {\r\n\t            alignmentPattern = findAlignmentInRegion(moduleSize, estAlignmentX, estAlignmentY, i, image);\r\n\t            if (!alignmentPattern) {\r\n\t                continue;\r\n\t            }\r\n\t            break;\r\n\t        }\r\n\t    }\r\n\t    var transform = createTransform(location.topLeft, location.topRight, location.bottomLeft, alignmentPattern, dimension);\r\n\t    return bitArrayFromImage(image, dimension, transform);\r\n\t}\r\n\texports.extract = extract;\r\n\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar helpers_1 = __webpack_require__(6);\r\n\tfunction aboutEquals(center, moduleSize, i, j) {\r\n\t    if (Math.abs(i - center.y) <= moduleSize && Math.abs(j - center.x) <= moduleSize) {\r\n\t        var moduleSizeDiff = Math.abs(moduleSize - center.estimatedModuleSize);\r\n\t        return moduleSizeDiff <= 1 || moduleSizeDiff <= center.estimatedModuleSize;\r\n\t    }\r\n\t    return false;\r\n\t}\r\n\tfunction combineEstimate(center, i, j, newModuleSize) {\r\n\t    var combinedX = (center.x + j) / 2;\r\n\t    var combinedY = (center.y + i) / 2;\r\n\t    var combinedModuleSize = (center.estimatedModuleSize + newModuleSize) / 2;\r\n\t    return { x: combinedX, y: combinedY, estimatedModuleSize: combinedModuleSize };\r\n\t}\r\n\t// returns true if the proportions of the counts is close enough to the 1/1/1 ratios used by alignment\r\n\t// patterns to be considered a match\r\n\tfunction foundPatternCross(stateCount, moduleSize) {\r\n\t    var maxVariance = moduleSize / 2;\r\n\t    for (var i = 0; i < 3; i++) {\r\n\t        if (Math.abs(moduleSize - stateCount[i]) >= maxVariance) {\r\n\t            return false;\r\n\t        }\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\t// Given a count of black/white/black pixels just seen and an end position,\r\n\t// figures the location of the center of this black/white/black run.\r\n\tfunction centerFromEnd(stateCount, end) {\r\n\t    var result = (end - stateCount[2]) - stateCount[1] / 2;\r\n\t    if (helpers_1.isNaN(result)) {\r\n\t        return null;\r\n\t    }\r\n\t    return result;\r\n\t}\r\n\t// After a horizontal scan finds a potential alignment pattern, this method\r\n\t// \"cross-checks\" by scanning down vertically through the center of the possible\r\n\t// alignment pattern to see if the same proportion is detected.</p>\r\n\t//\r\n\t// startI - row where an alignment pattern was detected</param>\r\n\t// centerJ - center of the section that appears to cross an alignment pattern</param>\r\n\t// maxCount - maximum reasonable number of modules that should be observed in any reading state, based\r\n\t//   on the results of the horizontal scan</param>\r\n\t// originalStateCountTotal - The original state count total\r\n\tfunction crossCheckVertical(startI, centerJ, maxCount, originalStateCountTotal, moduleSize, image) {\r\n\t    var maxI = image.height;\r\n\t    var stateCount = [0, 0, 0];\r\n\t    // Start counting up from center\r\n\t    var i = startI;\r\n\t    while (i >= 0 && image.get(centerJ, i) && stateCount[1] <= maxCount) {\r\n\t        stateCount[1]++;\r\n\t        i--;\r\n\t    }\r\n\t    // If already too many modules in this state or ran off the edge:\r\n\t    if (i < 0 || stateCount[1] > maxCount) {\r\n\t        return null;\r\n\t    }\r\n\t    while (i >= 0 && !image.get(centerJ, i) && stateCount[0] <= maxCount) {\r\n\t        stateCount[0]++;\r\n\t        i--;\r\n\t    }\r\n\t    if (stateCount[0] > maxCount) {\r\n\t        return null;\r\n\t    }\r\n\t    // Now also count down from center\r\n\t    i = startI + 1;\r\n\t    while (i < maxI && image.get(centerJ, i) && stateCount[1] <= maxCount) {\r\n\t        stateCount[1]++;\r\n\t        i++;\r\n\t    }\r\n\t    if (i == maxI || stateCount[1] > maxCount) {\r\n\t        return null;\r\n\t    }\r\n\t    while (i < maxI && !image.get(centerJ, i) && stateCount[2] <= maxCount) {\r\n\t        stateCount[2]++;\r\n\t        i++;\r\n\t    }\r\n\t    if (stateCount[2] > maxCount) {\r\n\t        return null;\r\n\t    }\r\n\t    var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\r\n\t    if (5 * Math.abs(stateCountTotal - originalStateCountTotal) >= 2 * originalStateCountTotal) {\r\n\t        return null;\r\n\t    }\r\n\t    return foundPatternCross(stateCount, moduleSize) ? centerFromEnd(stateCount, i) : null;\r\n\t}\r\n\tfunction findAlignment(startX, startY, width, height, moduleSize, image) {\r\n\t    // Global State :(\r\n\t    var possibleCenters = [];\r\n\t    // This is called when a horizontal scan finds a possible alignment pattern. It will\r\n\t    // cross check with a vertical scan, and if successful, will see if this pattern had been\r\n\t    // found on a previous horizontal scan. If so, we consider it confirmed and conclude we have\r\n\t    // found the alignment pattern.</p>\r\n\t    //\r\n\t    // stateCount - reading state module counts from horizontal scan\r\n\t    // i - where alignment pattern may be found\r\n\t    // j - end of possible alignment pattern in row\r\n\t    function handlePossibleCenter(stateCount, i, j, moduleSize) {\r\n\t        var stateCountTotal = stateCount[0] + stateCount[1] + stateCount[2];\r\n\t        var centerJ = centerFromEnd(stateCount, j);\r\n\t        if (centerJ == null) {\r\n\t            return null;\r\n\t        }\r\n\t        var centerI = crossCheckVertical(i, Math.floor(centerJ), 2 * stateCount[1], stateCountTotal, moduleSize, image);\r\n\t        if (centerI != null) {\r\n\t            var estimatedModuleSize = (stateCount[0] + stateCount[1] + stateCount[2]) / 3;\r\n\t            for (var i2 in possibleCenters) {\r\n\t                var center = possibleCenters[i2];\r\n\t                // Look for about the same center and module size:\r\n\t                if (aboutEquals(center, estimatedModuleSize, centerI, centerJ)) {\r\n\t                    return combineEstimate(center, centerI, centerJ, estimatedModuleSize);\r\n\t                }\r\n\t            }\r\n\t            // Hadn't found this before; save it\r\n\t            var point = { x: centerJ, y: centerI, estimatedModuleSize: estimatedModuleSize };\r\n\t            possibleCenters.push(point);\r\n\t        }\r\n\t        return null;\r\n\t    }\r\n\t    var maxJ = startX + width;\r\n\t    var middleI = startY + (height >> 1);\r\n\t    // We are looking for black/white/black modules in 1:1:1 ratio;\r\n\t    // this tracks the number of black/white/black modules seen so far\r\n\t    var stateCount = [0, 0, 0]; // WTF\r\n\t    for (var iGen = 0; iGen < height; iGen++) {\r\n\t        // Search from middle outwards\r\n\t        var i = middleI + ((iGen & 0x01) == 0 ? ((iGen + 1) >> 1) : -((iGen + 1) >> 1));\r\n\t        stateCount[0] = 0;\r\n\t        stateCount[1] = 0;\r\n\t        stateCount[2] = 0;\r\n\t        var j = startX;\r\n\t        // Burn off leading white pixels before anything else; if we start in the middle of\r\n\t        // a white run, it doesn't make sense to count its length, since we don't know if the\r\n\t        // white run continued to the left of the start point\r\n\t        while (j < maxJ && !image.get(j, i)) {\r\n\t            j++;\r\n\t        }\r\n\t        var currentState = 0;\r\n\t        while (j < maxJ) {\r\n\t            if (image.get(j, i)) {\r\n\t                // Black pixel\r\n\t                if (currentState == 1) {\r\n\t                    // Counting black pixels\r\n\t                    stateCount[currentState]++;\r\n\t                }\r\n\t                else {\r\n\t                    // Counting white pixels\r\n\t                    if (currentState == 2) {\r\n\t                        // A winner?\r\n\t                        if (foundPatternCross(stateCount, moduleSize)) {\r\n\t                            // Yes\r\n\t                            confirmed = handlePossibleCenter(stateCount, i, j, moduleSize);\r\n\t                            if (confirmed != null) {\r\n\t                                return confirmed;\r\n\t                            }\r\n\t                        }\r\n\t                        stateCount[0] = stateCount[2];\r\n\t                        stateCount[1] = 1;\r\n\t                        stateCount[2] = 0;\r\n\t                        currentState = 1;\r\n\t                    }\r\n\t                    else {\r\n\t                        stateCount[++currentState]++;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                // White pixel\r\n\t                if (currentState == 1) {\r\n\t                    // Counting black pixels\r\n\t                    currentState++;\r\n\t                }\r\n\t                stateCount[currentState]++;\r\n\t            }\r\n\t            j++;\r\n\t        }\r\n\t        if (foundPatternCross(stateCount, moduleSize)) {\r\n\t            var confirmed = handlePossibleCenter(stateCount, i, moduleSize, maxJ);\r\n\t            if (confirmed != null) {\r\n\t                return confirmed;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    // Hmm, nothing we saw was observed and confirmed twice. If we had\r\n\t    // any guess at all, return it.\r\n\t    if (possibleCenters.length != 0) {\r\n\t        return possibleCenters[0];\r\n\t    }\r\n\t    return null;\r\n\t}\r\n\texports.findAlignment = findAlignment;\r\n\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar BITS_SET_IN_HALF_BYTE = [0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4];\r\n\tfunction numBitsDiffering(a, b) {\r\n\t    a ^= b; // a now has a 1 bit exactly where its bit differs with b's\r\n\t    // Count bits set quickly with a series of lookups:\r\n\t    return BITS_SET_IN_HALF_BYTE[a & 0x0F] +\r\n\t        BITS_SET_IN_HALF_BYTE[((a >> 4) & 0x0F)] +\r\n\t        BITS_SET_IN_HALF_BYTE[((a >> 8) & 0x0F)] +\r\n\t        BITS_SET_IN_HALF_BYTE[((a >> 12) & 0x0F)] +\r\n\t        BITS_SET_IN_HALF_BYTE[((a >> 16) & 0x0F)] +\r\n\t        BITS_SET_IN_HALF_BYTE[((a >> 20) & 0x0F)] +\r\n\t        BITS_SET_IN_HALF_BYTE[((a >> 24) & 0x0F)] +\r\n\t        BITS_SET_IN_HALF_BYTE[((a >> 28) & 0x0F)];\r\n\t}\r\n\texports.numBitsDiffering = numBitsDiffering;\r\n\t// Taken from underscore JS\r\n\tfunction isNaN(obj) {\r\n\t    return Object.prototype.toString.call(obj) === '[object Number]' && obj !== +obj;\r\n\t}\r\n\texports.isNaN = isNaN;\r\n\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t/// <reference path=\"../common/types.d.ts\" />\r\n\t\"use strict\";\r\n\tfunction squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n\t    var dx3 = x0 - x1 + x2 - x3;\r\n\t    var dy3 = y0 - y1 + y2 - y3;\r\n\t    if (dx3 == 0 && dy3 == 0) {\r\n\t        // Affine\r\n\t        return {\r\n\t            a11: x1 - x0,\r\n\t            a21: x2 - x1,\r\n\t            a31: x0,\r\n\t            a12: y1 - y0,\r\n\t            a22: y2 - y1,\r\n\t            a32: y0,\r\n\t            a13: 0,\r\n\t            a23: 0,\r\n\t            a33: 1\r\n\t        };\r\n\t    }\r\n\t    else {\r\n\t        var dx1 = x1 - x2;\r\n\t        var dx2 = x3 - x2;\r\n\t        var dy1 = y1 - y2;\r\n\t        var dy2 = y3 - y2;\r\n\t        var denominator = dx1 * dy2 - dx2 * dy1;\r\n\t        var a13 = (dx3 * dy2 - dx2 * dy3) / denominator;\r\n\t        var a23 = (dx1 * dy3 - dx3 * dy1) / denominator;\r\n\t        return {\r\n\t            a11: x1 - x0 + a13 * x1,\r\n\t            a21: x3 - x0 + a23 * x3,\r\n\t            a31: x0,\r\n\t            a12: y1 - y0 + a13 * y1,\r\n\t            a22: y3 - y0 + a23 * y3,\r\n\t            a32: y0,\r\n\t            a13: a13,\r\n\t            a23: a23,\r\n\t            a33: 1\r\n\t        };\r\n\t    }\r\n\t}\r\n\tfunction buildAdjoint(i) {\r\n\t    return {\r\n\t        a11: i.a22 * i.a33 - i.a23 * i.a32,\r\n\t        a21: i.a23 * i.a31 - i.a21 * i.a33,\r\n\t        a31: i.a21 * i.a32 - i.a22 * i.a31,\r\n\t        a12: i.a13 * i.a32 - i.a12 * i.a33,\r\n\t        a22: i.a11 * i.a33 - i.a13 * i.a31,\r\n\t        a32: i.a12 * i.a31 - i.a11 * i.a32,\r\n\t        a13: i.a12 * i.a23 - i.a13 * i.a22,\r\n\t        a23: i.a13 * i.a21 - i.a11 * i.a23,\r\n\t        a33: i.a11 * i.a22 - i.a12 * i.a21\r\n\t    };\r\n\t}\r\n\tfunction times(a, b) {\r\n\t    return {\r\n\t        a11: a.a11 * b.a11 + a.a21 * b.a12 + a.a31 * b.a13,\r\n\t        a21: a.a11 * b.a21 + a.a21 * b.a22 + a.a31 * b.a23,\r\n\t        a31: a.a11 * b.a31 + a.a21 * b.a32 + a.a31 * b.a33,\r\n\t        a12: a.a12 * b.a11 + a.a22 * b.a12 + a.a32 * b.a13,\r\n\t        a22: a.a12 * b.a21 + a.a22 * b.a22 + a.a32 * b.a23,\r\n\t        a32: a.a12 * b.a31 + a.a22 * b.a32 + a.a32 * b.a33,\r\n\t        a13: a.a13 * b.a11 + a.a23 * b.a12 + a.a33 * b.a13,\r\n\t        a23: a.a13 * b.a21 + a.a23 * b.a22 + a.a33 * b.a23,\r\n\t        a33: a.a13 * b.a31 + a.a23 * b.a32 + a.a33 * b.a33\r\n\t    };\r\n\t}\r\n\tfunction quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3) {\r\n\t    // Here, the adjoint serves as the inverse:\r\n\t    return buildAdjoint(squareToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3));\r\n\t}\r\n\tfunction transformPoints(transform, points) {\r\n\t    var max = points.length;\r\n\t    var a11 = transform.a11;\r\n\t    var a12 = transform.a12;\r\n\t    var a13 = transform.a13;\r\n\t    var a21 = transform.a21;\r\n\t    var a22 = transform.a22;\r\n\t    var a23 = transform.a23;\r\n\t    var a31 = transform.a31;\r\n\t    var a32 = transform.a32;\r\n\t    var a33 = transform.a33;\r\n\t    for (var i = 0; i < max; i += 2) {\r\n\t        var x = points[i];\r\n\t        var y = points[i + 1];\r\n\t        var denominator = a13 * x + a23 * y + a33;\r\n\t        points[i] = (a11 * x + a21 * y + a31) / denominator;\r\n\t        points[i + 1] = (a12 * x + a22 * y + a32) / denominator;\r\n\t    }\r\n\t    return points;\r\n\t}\r\n\texports.transformPoints = transformPoints;\r\n\tfunction quadrilateralToQuadrilateral(x0, y0, x1, y1, x2, y2, x3, y3, x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p) {\r\n\t    var qToS = quadrilateralToSquare(x0, y0, x1, y1, x2, y2, x3, y3);\r\n\t    var sToQ = squareToQuadrilateral(x0p, y0p, x1p, y1p, x2p, y2p, x3p, y3p);\r\n\t    return times(sToQ, qToS);\r\n\t}\r\n\texports.quadrilateralToQuadrilateral = quadrilateralToQuadrilateral;\r\n\n\n/***/ },\n/* 8 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar helpers_1 = __webpack_require__(6);\r\n\tvar VERSION_DECODE_INFO = [\r\n\t    0x07C94, 0x085BC, 0x09A99, 0x0A4D3, 0x0BBF6,\r\n\t    0x0C762, 0x0D847, 0x0E60D, 0x0F928, 0x10B78,\r\n\t    0x1145D, 0x12A17, 0x13532, 0x149A6, 0x15683,\r\n\t    0x168C9, 0x177EC, 0x18EC4, 0x191E1, 0x1AFAB,\r\n\t    0x1B08E, 0x1CC1A, 0x1D33F, 0x1ED75, 0x1F250,\r\n\t    0x209D5, 0x216F0, 0x228BA, 0x2379F, 0x24B0B,\r\n\t    0x2542E, 0x26A64, 0x27541, 0x28C69,\r\n\t];\r\n\tvar ECB = (function () {\r\n\t    function ECB(_count, _dataCodewords) {\r\n\t        this.count = _count;\r\n\t        this.dataCodewords = _dataCodewords;\r\n\t    }\r\n\t    return ECB;\r\n\t}());\r\n\tvar ECBlocks = (function () {\r\n\t    function ECBlocks(_ecCodewordsPerBlock) {\r\n\t        var _ecBlocks = [];\r\n\t        for (var _i = 1; _i < arguments.length; _i++) {\r\n\t            _ecBlocks[_i - 1] = arguments[_i];\r\n\t        }\r\n\t        this.ecCodewordsPerBlock = _ecCodewordsPerBlock;\r\n\t        this.ecBlocks = _ecBlocks;\r\n\t    }\r\n\t    ECBlocks.prototype.getNumBlocks = function () {\r\n\t        return this.ecBlocks.reduce(function (a, b) { return (a + b.count); }, 0);\r\n\t    };\r\n\t    ECBlocks.prototype.getTotalECCodewords = function () {\r\n\t        return this.ecCodewordsPerBlock * this.getNumBlocks();\r\n\t    };\r\n\t    return ECBlocks;\r\n\t}());\r\n\tvar Version = (function () {\r\n\t    function Version(_versionNumber, _alignmentPatternCenters) {\r\n\t        var _ecBlocks = [];\r\n\t        for (var _i = 2; _i < arguments.length; _i++) {\r\n\t            _ecBlocks[_i - 2] = arguments[_i];\r\n\t        }\r\n\t        this.versionNumber = _versionNumber;\r\n\t        this.alignmentPatternCenters = _alignmentPatternCenters;\r\n\t        this.ecBlocks = _ecBlocks;\r\n\t        var total = 0;\r\n\t        var ecCodewords = this.ecBlocks[0].ecCodewordsPerBlock;\r\n\t        var ecbArray = this.ecBlocks[0].ecBlocks;\r\n\t        ecbArray.forEach(function (ecBlock) {\r\n\t            total += ecBlock.count * (ecBlock.dataCodewords + ecCodewords);\r\n\t        });\r\n\t        this.totalCodewords = total;\r\n\t    }\r\n\t    Version.prototype.getDimensionForVersion = function () {\r\n\t        return 17 + 4 * this.versionNumber;\r\n\t    };\r\n\t    Version.prototype.getECBlocksForLevel = function (ecLevel) {\r\n\t        return this.ecBlocks[ecLevel.ordinal];\r\n\t    };\r\n\t    Version.decodeVersionInformation = function (versionBits) {\r\n\t        var bestDifference = Infinity;\r\n\t        var bestVersion = 0;\r\n\t        for (var i = 0; i < VERSION_DECODE_INFO.length; i++) {\r\n\t            var targetVersion = VERSION_DECODE_INFO[i];\r\n\t            // Do the version info bits match exactly? done.\r\n\t            if (targetVersion == versionBits) {\r\n\t                return getVersionForNumber(i + 7);\r\n\t            }\r\n\t            // Otherwise see if this is the closest to a real version info bit string\r\n\t            // we have seen so far\r\n\t            var bitsDifference = helpers_1.numBitsDiffering(versionBits, targetVersion);\r\n\t            if (bitsDifference < bestDifference) {\r\n\t                bestVersion = i + 7;\r\n\t                bestDifference = bitsDifference;\r\n\t            }\r\n\t        }\r\n\t        // We can tolerate up to 3 bits of error since no two version info codewords will\r\n\t        // differ in less than 8 bits.\r\n\t        if (bestDifference <= 3) {\r\n\t            return getVersionForNumber(bestVersion);\r\n\t        }\r\n\t        // If we didn't find a close enough match, fail\r\n\t        return null;\r\n\t    };\r\n\t    return Version;\r\n\t}());\r\n\texports.Version = Version;\r\n\tvar VERSIONS = [\r\n\t    new Version(1, [], new ECBlocks(7, new ECB(1, 19)), new ECBlocks(10, new ECB(1, 16)), new ECBlocks(13, new ECB(1, 13)), new ECBlocks(17, new ECB(1, 9))),\r\n\t    new Version(2, [6, 18], new ECBlocks(10, new ECB(1, 34)), new ECBlocks(16, new ECB(1, 28)), new ECBlocks(22, new ECB(1, 22)), new ECBlocks(28, new ECB(1, 16))),\r\n\t    new Version(3, [6, 22], new ECBlocks(15, new ECB(1, 55)), new ECBlocks(26, new ECB(1, 44)), new ECBlocks(18, new ECB(2, 17)), new ECBlocks(22, new ECB(2, 13))),\r\n\t    new Version(4, [6, 26], new ECBlocks(20, new ECB(1, 80)), new ECBlocks(18, new ECB(2, 32)), new ECBlocks(26, new ECB(2, 24)), new ECBlocks(16, new ECB(4, 9))),\r\n\t    new Version(5, [6, 30], new ECBlocks(26, new ECB(1, 108)), new ECBlocks(24, new ECB(2, 43)), new ECBlocks(18, new ECB(2, 15), new ECB(2, 16)), new ECBlocks(22, new ECB(2, 11), new ECB(2, 12))),\r\n\t    new Version(6, [6, 34], new ECBlocks(18, new ECB(2, 68)), new ECBlocks(16, new ECB(4, 27)), new ECBlocks(24, new ECB(4, 19)), new ECBlocks(28, new ECB(4, 15))),\r\n\t    new Version(7, [6, 22, 38], new ECBlocks(20, new ECB(2, 78)), new ECBlocks(18, new ECB(4, 31)), new ECBlocks(18, new ECB(2, 14), new ECB(4, 15)), new ECBlocks(26, new ECB(4, 13), new ECB(1, 14))),\r\n\t    new Version(8, [6, 24, 42], new ECBlocks(24, new ECB(2, 97)), new ECBlocks(22, new ECB(2, 38), new ECB(2, 39)), new ECBlocks(22, new ECB(4, 18), new ECB(2, 19)), new ECBlocks(26, new ECB(4, 14), new ECB(2, 15))),\r\n\t    new Version(9, [6, 26, 46], new ECBlocks(30, new ECB(2, 116)), new ECBlocks(22, new ECB(3, 36), new ECB(2, 37)), new ECBlocks(20, new ECB(4, 16), new ECB(4, 17)), new ECBlocks(24, new ECB(4, 12), new ECB(4, 13))),\r\n\t    new Version(10, [6, 28, 50], new ECBlocks(18, new ECB(2, 68), new ECB(2, 69)), new ECBlocks(26, new ECB(4, 43), new ECB(1, 44)), new ECBlocks(24, new ECB(6, 19), new ECB(2, 20)), new ECBlocks(28, new ECB(6, 15), new ECB(2, 16))),\r\n\t    new Version(11, [6, 30, 54], new ECBlocks(20, new ECB(4, 81)), new ECBlocks(30, new ECB(1, 50), new ECB(4, 51)), new ECBlocks(28, new ECB(4, 22), new ECB(4, 23)), new ECBlocks(24, new ECB(3, 12), new ECB(8, 13))),\r\n\t    new Version(12, [6, 32, 58], new ECBlocks(24, new ECB(2, 92), new ECB(2, 93)), new ECBlocks(22, new ECB(6, 36), new ECB(2, 37)), new ECBlocks(26, new ECB(4, 20), new ECB(6, 21)), new ECBlocks(28, new ECB(7, 14), new ECB(4, 15))),\r\n\t    new Version(13, [6, 34, 62], new ECBlocks(26, new ECB(4, 107)), new ECBlocks(22, new ECB(8, 37), new ECB(1, 38)), new ECBlocks(24, new ECB(8, 20), new ECB(4, 21)), new ECBlocks(22, new ECB(12, 11), new ECB(4, 12))),\r\n\t    new Version(14, [6, 26, 46, 66], new ECBlocks(30, new ECB(3, 115), new ECB(1, 116)), new ECBlocks(24, new ECB(4, 40), new ECB(5, 41)), new ECBlocks(20, new ECB(11, 16), new ECB(5, 17)), new ECBlocks(24, new ECB(11, 12), new ECB(5, 13))),\r\n\t    new Version(15, [6, 26, 48, 70], new ECBlocks(22, new ECB(5, 87), new ECB(1, 88)), new ECBlocks(24, new ECB(5, 41), new ECB(5, 42)), new ECBlocks(30, new ECB(5, 24), new ECB(7, 25)), new ECBlocks(24, new ECB(11, 12), new ECB(7, 13))),\r\n\t    new Version(16, [6, 26, 50, 74], new ECBlocks(24, new ECB(5, 98), new ECB(1, 99)), new ECBlocks(28, new ECB(7, 45), new ECB(3, 46)), new ECBlocks(24, new ECB(15, 19), new ECB(2, 20)), new ECBlocks(30, new ECB(3, 15), new ECB(13, 16))),\r\n\t    new Version(17, [6, 30, 54, 78], new ECBlocks(28, new ECB(1, 107), new ECB(5, 108)), new ECBlocks(28, new ECB(10, 46), new ECB(1, 47)), new ECBlocks(28, new ECB(1, 22), new ECB(15, 23)), new ECBlocks(28, new ECB(2, 14), new ECB(17, 15))),\r\n\t    new Version(18, [6, 30, 56, 82], new ECBlocks(30, new ECB(5, 120), new ECB(1, 121)), new ECBlocks(26, new ECB(9, 43), new ECB(4, 44)), new ECBlocks(28, new ECB(17, 22), new ECB(1, 23)), new ECBlocks(28, new ECB(2, 14), new ECB(19, 15))),\r\n\t    new Version(19, [6, 30, 58, 86], new ECBlocks(28, new ECB(3, 113), new ECB(4, 114)), new ECBlocks(26, new ECB(3, 44), new ECB(11, 45)), new ECBlocks(26, new ECB(17, 21), new ECB(4, 22)), new ECBlocks(26, new ECB(9, 13), new ECB(16, 14))),\r\n\t    new Version(20, [6, 34, 62, 90], new ECBlocks(28, new ECB(3, 107), new ECB(5, 108)), new ECBlocks(26, new ECB(3, 41), new ECB(13, 42)), new ECBlocks(30, new ECB(15, 24), new ECB(5, 25)), new ECBlocks(28, new ECB(15, 15), new ECB(10, 16))),\r\n\t    new Version(21, [6, 28, 50, 72, 94], new ECBlocks(28, new ECB(4, 116), new ECB(4, 117)), new ECBlocks(26, new ECB(17, 42)), new ECBlocks(28, new ECB(17, 22), new ECB(6, 23)), new ECBlocks(30, new ECB(19, 16), new ECB(6, 17))),\r\n\t    new Version(22, [6, 26, 50, 74, 98], new ECBlocks(28, new ECB(2, 111), new ECB(7, 112)), new ECBlocks(28, new ECB(17, 46)), new ECBlocks(30, new ECB(7, 24), new ECB(16, 25)), new ECBlocks(24, new ECB(34, 13))),\r\n\t    new Version(23, [6, 30, 54, 74, 102], new ECBlocks(30, new ECB(4, 121), new ECB(5, 122)), new ECBlocks(28, new ECB(4, 47), new ECB(14, 48)), new ECBlocks(30, new ECB(11, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(16, 15), new ECB(14, 16))),\r\n\t    new Version(24, [6, 28, 54, 80, 106], new ECBlocks(30, new ECB(6, 117), new ECB(4, 118)), new ECBlocks(28, new ECB(6, 45), new ECB(14, 46)), new ECBlocks(30, new ECB(11, 24), new ECB(16, 25)), new ECBlocks(30, new ECB(30, 16), new ECB(2, 17))),\r\n\t    new Version(25, [6, 32, 58, 84, 110], new ECBlocks(26, new ECB(8, 106), new ECB(4, 107)), new ECBlocks(28, new ECB(8, 47), new ECB(13, 48)), new ECBlocks(30, new ECB(7, 24), new ECB(22, 25)), new ECBlocks(30, new ECB(22, 15), new ECB(13, 16))),\r\n\t    new Version(26, [6, 30, 58, 86, 114], new ECBlocks(28, new ECB(10, 114), new ECB(2, 115)), new ECBlocks(28, new ECB(19, 46), new ECB(4, 47)), new ECBlocks(28, new ECB(28, 22), new ECB(6, 23)), new ECBlocks(30, new ECB(33, 16), new ECB(4, 17))),\r\n\t    new Version(27, [6, 34, 62, 90, 118], new ECBlocks(30, new ECB(8, 122), new ECB(4, 123)), new ECBlocks(28, new ECB(22, 45), new ECB(3, 46)), new ECBlocks(30, new ECB(8, 23), new ECB(26, 24)), new ECBlocks(30, new ECB(12, 15), new ECB(28, 16))),\r\n\t    new Version(28, [6, 26, 50, 74, 98, 122], new ECBlocks(30, new ECB(3, 117), new ECB(10, 118)), new ECBlocks(28, new ECB(3, 45), new ECB(23, 46)), new ECBlocks(30, new ECB(4, 24), new ECB(31, 25)), new ECBlocks(30, new ECB(11, 15), new ECB(31, 16))),\r\n\t    new Version(29, [6, 30, 54, 78, 102, 126], new ECBlocks(30, new ECB(7, 116), new ECB(7, 117)), new ECBlocks(28, new ECB(21, 45), new ECB(7, 46)), new ECBlocks(30, new ECB(1, 23), new ECB(37, 24)), new ECBlocks(30, new ECB(19, 15), new ECB(26, 16))),\r\n\t    new Version(30, [6, 26, 52, 78, 104, 130], new ECBlocks(30, new ECB(5, 115), new ECB(10, 116)), new ECBlocks(28, new ECB(19, 47), new ECB(10, 48)), new ECBlocks(30, new ECB(15, 24), new ECB(25, 25)), new ECBlocks(30, new ECB(23, 15), new ECB(25, 16))),\r\n\t    new Version(31, [6, 30, 56, 82, 108, 134], new ECBlocks(30, new ECB(13, 115), new ECB(3, 116)), new ECBlocks(28, new ECB(2, 46), new ECB(29, 47)), new ECBlocks(30, new ECB(42, 24), new ECB(1, 25)), new ECBlocks(30, new ECB(23, 15), new ECB(28, 16))),\r\n\t    new Version(32, [6, 34, 60, 86, 112, 138], new ECBlocks(30, new ECB(17, 115)), new ECBlocks(28, new ECB(10, 46), new ECB(23, 47)), new ECBlocks(30, new ECB(10, 24), new ECB(35, 25)), new ECBlocks(30, new ECB(19, 15), new ECB(35, 16))),\r\n\t    new Version(33, [6, 30, 58, 86, 114, 142], new ECBlocks(30, new ECB(17, 115), new ECB(1, 116)), new ECBlocks(28, new ECB(14, 46), new ECB(21, 47)), new ECBlocks(30, new ECB(29, 24), new ECB(19, 25)), new ECBlocks(30, new ECB(11, 15), new ECB(46, 16))),\r\n\t    new Version(34, [6, 34, 62, 90, 118, 146], new ECBlocks(30, new ECB(13, 115), new ECB(6, 116)), new ECBlocks(28, new ECB(14, 46), new ECB(23, 47)), new ECBlocks(30, new ECB(44, 24), new ECB(7, 25)), new ECBlocks(30, new ECB(59, 16), new ECB(1, 17))),\r\n\t    new Version(35, [6, 30, 54, 78, 102, 126, 150], new ECBlocks(30, new ECB(12, 121), new ECB(7, 122)), new ECBlocks(28, new ECB(12, 47), new ECB(26, 48)), new ECBlocks(30, new ECB(39, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(22, 15), new ECB(41, 16))),\r\n\t    new Version(36, [6, 24, 50, 76, 102, 128, 154], new ECBlocks(30, new ECB(6, 121), new ECB(14, 122)), new ECBlocks(28, new ECB(6, 47), new ECB(34, 48)), new ECBlocks(30, new ECB(46, 24), new ECB(10, 25)), new ECBlocks(30, new ECB(2, 15), new ECB(64, 16))),\r\n\t    new Version(37, [6, 28, 54, 80, 106, 132, 158], new ECBlocks(30, new ECB(17, 122), new ECB(4, 123)), new ECBlocks(28, new ECB(29, 46), new ECB(14, 47)), new ECBlocks(30, new ECB(49, 24), new ECB(10, 25)), new ECBlocks(30, new ECB(24, 15), new ECB(46, 16))),\r\n\t    new Version(38, [6, 32, 58, 84, 110, 136, 162], new ECBlocks(30, new ECB(4, 122), new ECB(18, 123)), new ECBlocks(28, new ECB(13, 46), new ECB(32, 47)), new ECBlocks(30, new ECB(48, 24), new ECB(14, 25)), new ECBlocks(30, new ECB(42, 15), new ECB(32, 16))),\r\n\t    new Version(39, [6, 26, 54, 82, 110, 138, 166], new ECBlocks(30, new ECB(20, 117), new ECB(4, 118)), new ECBlocks(28, new ECB(40, 47), new ECB(7, 48)), new ECBlocks(30, new ECB(43, 24), new ECB(22, 25)), new ECBlocks(30, new ECB(10, 15), new ECB(67, 16))),\r\n\t    new Version(40, [6, 30, 58, 86, 114, 142, 170], new ECBlocks(30, new ECB(19, 118), new ECB(6, 119)), new ECBlocks(28, new ECB(18, 47), new ECB(31, 48)), new ECBlocks(30, new ECB(34, 24), new ECB(34, 25)), new ECBlocks(30, new ECB(20, 15), new ECB(61, 16))),\r\n\t];\r\n\tfunction getVersionForNumber(versionNumber) {\r\n\t    if (versionNumber < 1 || versionNumber > 40) {\r\n\t        throw new Error(\"Invalid version number \" + versionNumber);\r\n\t    }\r\n\t    return VERSIONS[versionNumber - 1];\r\n\t}\r\n\texports.getVersionForNumber = getVersionForNumber;\r\n\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar bitmatrix_1 = __webpack_require__(2);\r\n\tvar decodeqrdata_1 = __webpack_require__(10);\r\n\tvar helpers_1 = __webpack_require__(6);\r\n\tvar reedsolomon_1 = __webpack_require__(12);\r\n\tvar version_1 = __webpack_require__(8);\r\n\tvar FORMAT_INFO_MASK_QR = 0x5412;\r\n\tvar FORMAT_INFO_DECODE_LOOKUP = [\r\n\t    [0x5412, 0x00],\r\n\t    [0x5125, 0x01],\r\n\t    [0x5E7C, 0x02],\r\n\t    [0x5B4B, 0x03],\r\n\t    [0x45F9, 0x04],\r\n\t    [0x40CE, 0x05],\r\n\t    [0x4F97, 0x06],\r\n\t    [0x4AA0, 0x07],\r\n\t    [0x77C4, 0x08],\r\n\t    [0x72F3, 0x09],\r\n\t    [0x7DAA, 0x0A],\r\n\t    [0x789D, 0x0B],\r\n\t    [0x662F, 0x0C],\r\n\t    [0x6318, 0x0D],\r\n\t    [0x6C41, 0x0E],\r\n\t    [0x6976, 0x0F],\r\n\t    [0x1689, 0x10],\r\n\t    [0x13BE, 0x11],\r\n\t    [0x1CE7, 0x12],\r\n\t    [0x19D0, 0x13],\r\n\t    [0x0762, 0x14],\r\n\t    [0x0255, 0x15],\r\n\t    [0x0D0C, 0x16],\r\n\t    [0x083B, 0x17],\r\n\t    [0x355F, 0x18],\r\n\t    [0x3068, 0x19],\r\n\t    [0x3F31, 0x1A],\r\n\t    [0x3A06, 0x1B],\r\n\t    [0x24B4, 0x1C],\r\n\t    [0x2183, 0x1D],\r\n\t    [0x2EDA, 0x1E],\r\n\t    [0x2BED, 0x1F],\r\n\t];\r\n\tvar DATA_MASKS = [\r\n\t    function (i, j) { return ((i + j) & 0x01) === 0; },\r\n\t    function (i, j) { return (i & 0x01) === 0; },\r\n\t    function (i, j) { return j % 3 == 0; },\r\n\t    function (i, j) { return (i + j) % 3 === 0; },\r\n\t    function (i, j) { return (((i >> 1) + (j / 3)) & 0x01) === 0; },\r\n\t    function (i, j) { return ((i * j) & 0x01) + ((i * j) % 3) === 0; },\r\n\t    function (i, j) { return ((((i * j) & 0x01) + ((i * j) % 3)) & 0x01) === 0; },\r\n\t    function (i, j) { return ((((i + j) & 0x01) + ((i * j) % 3)) & 0x01) === 0; },\r\n\t];\r\n\tvar ERROR_CORRECTION_LEVELS = [\r\n\t    { ordinal: 1, bits: 0x00, name: \"M\" },\r\n\t    { ordinal: 0, bits: 0x01, name: \"L\" },\r\n\t    { ordinal: 3, bits: 0x02, name: \"H\" },\r\n\t    { ordinal: 2, bits: 0x03, name: \"Q\" },\r\n\t];\r\n\tfunction buildFunctionPattern(version) {\r\n\t    var dimension = version.getDimensionForVersion();\r\n\t    var emptyArray = new Array(dimension * dimension);\r\n\t    for (var i = 0; i < emptyArray.length; i++) {\r\n\t        emptyArray[i] = false;\r\n\t    }\r\n\t    var bitMatrix = new bitmatrix_1.BitMatrix(emptyArray, dimension);\r\n\t    ///BitMatrix bitMatrix = new BitMatrix(dimension);\r\n\t    // Top left finder pattern + separator + format\r\n\t    bitMatrix.setRegion(0, 0, 9, 9);\r\n\t    // Top right finder pattern + separator + format\r\n\t    bitMatrix.setRegion(dimension - 8, 0, 8, 9);\r\n\t    // Bottom left finder pattern + separator + format\r\n\t    bitMatrix.setRegion(0, dimension - 8, 9, 8);\r\n\t    // Alignment patterns\r\n\t    var max = version.alignmentPatternCenters.length;\r\n\t    for (var x = 0; x < max; x++) {\r\n\t        var i = version.alignmentPatternCenters[x] - 2;\r\n\t        for (var y = 0; y < max; y++) {\r\n\t            if ((x == 0 && (y == 0 || y == max - 1)) || (x == max - 1 && y == 0)) {\r\n\t                // No alignment patterns near the three finder paterns\r\n\t                continue;\r\n\t            }\r\n\t            bitMatrix.setRegion(version.alignmentPatternCenters[y] - 2, i, 5, 5);\r\n\t        }\r\n\t    }\r\n\t    // Vertical timing pattern\r\n\t    bitMatrix.setRegion(6, 9, 1, dimension - 17);\r\n\t    // Horizontal timing pattern\r\n\t    bitMatrix.setRegion(9, 6, dimension - 17, 1);\r\n\t    if (version.versionNumber > 6) {\r\n\t        // Version info, top right\r\n\t        bitMatrix.setRegion(dimension - 11, 0, 3, 6);\r\n\t        // Version info, bottom left\r\n\t        bitMatrix.setRegion(0, dimension - 11, 6, 3);\r\n\t    }\r\n\t    return bitMatrix;\r\n\t}\r\n\tfunction readCodewords(matrix, version, formatInfo) {\r\n\t    // Get the data mask for the format used in this QR Code. This will exclude\r\n\t    // some bits from reading as we wind through the bit matrix.\r\n\t    var dataMask = DATA_MASKS[formatInfo.dataMask];\r\n\t    var dimension = matrix.height;\r\n\t    var funcPattern = buildFunctionPattern(version);\r\n\t    var readingUp = true;\r\n\t    var result = [];\r\n\t    var resultOffset = 0;\r\n\t    var currentByte = 0;\r\n\t    var bitsRead = 0;\r\n\t    // Read columns in pairs, from right to left\r\n\t    for (var j = dimension - 1; j > 0; j -= 2) {\r\n\t        if (j == 6) {\r\n\t            // Skip whole column with vertical alignment pattern;\r\n\t            // saves time and makes the other code proceed more cleanly\r\n\t            j--;\r\n\t        }\r\n\t        // Read alternatingly from bottom to top then top to bottom\r\n\t        for (var count = 0; count < dimension; count++) {\r\n\t            var i = readingUp ? dimension - 1 - count : count;\r\n\t            for (var col = 0; col < 2; col++) {\r\n\t                // Ignore bits covered by the function pattern\r\n\t                if (!funcPattern.get(j - col, i)) {\r\n\t                    // Read a bit\r\n\t                    bitsRead++;\r\n\t                    currentByte <<= 1;\r\n\t                    if (matrix.get(j - col, i) !== dataMask(i, j - col)) {\r\n\t                        currentByte |= 1;\r\n\t                    }\r\n\t                    // If we've made a whole byte, save it off\r\n\t                    if (bitsRead == 8) {\r\n\t                        result[resultOffset++] = currentByte & 0xFF;\r\n\t                        bitsRead = 0;\r\n\t                        currentByte = 0;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        readingUp = !readingUp; // switch directions\r\n\t    }\r\n\t    if (resultOffset != version.totalCodewords) {\r\n\t        return null;\r\n\t    }\r\n\t    return result;\r\n\t}\r\n\tfunction readVersion(matrix) {\r\n\t    var dimension = matrix.height;\r\n\t    var provisionalVersion = (dimension - 17) >> 2;\r\n\t    if (provisionalVersion <= 6) {\r\n\t        return version_1.getVersionForNumber(provisionalVersion);\r\n\t    }\r\n\t    // Read top-right version info: 3 wide by 6 tall\r\n\t    var versionBits = 0;\r\n\t    var ijMin = dimension - 11;\r\n\t    for (var j = 5; j >= 0; j--) {\r\n\t        for (var i = dimension - 9; i >= ijMin; i--) {\r\n\t            versionBits = matrix.copyBit(i, j, versionBits);\r\n\t        }\r\n\t    }\r\n\t    var parsedVersion = version_1.Version.decodeVersionInformation(versionBits);\r\n\t    if (parsedVersion != null && parsedVersion.getDimensionForVersion() == dimension) {\r\n\t        return parsedVersion;\r\n\t    }\r\n\t    // Hmm, failed. Try bottom left: 6 wide by 3 tall\r\n\t    versionBits = 0;\r\n\t    for (var i = 5; i >= 0; i--) {\r\n\t        for (var j = dimension - 9; j >= ijMin; j--) {\r\n\t            versionBits = matrix.copyBit(i, j, versionBits);\r\n\t        }\r\n\t    }\r\n\t    parsedVersion = version_1.Version.decodeVersionInformation(versionBits);\r\n\t    if (parsedVersion != null && parsedVersion.getDimensionForVersion() == dimension) {\r\n\t        return parsedVersion;\r\n\t    }\r\n\t    return null;\r\n\t}\r\n\tfunction newFormatInformation(formatInfo) {\r\n\t    return {\r\n\t        errorCorrectionLevel: ERROR_CORRECTION_LEVELS[(formatInfo >> 3) & 0x03],\r\n\t        dataMask: formatInfo & 0x07\r\n\t    };\r\n\t}\r\n\tfunction doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2) {\r\n\t    // Find the int in FORMAT_INFO_DECODE_LOOKUP with fewest bits differing\r\n\t    var bestDifference = Infinity;\r\n\t    var bestFormatInfo = 0;\r\n\t    for (var i = 0; i < FORMAT_INFO_DECODE_LOOKUP.length; i++) {\r\n\t        var decodeInfo = FORMAT_INFO_DECODE_LOOKUP[i];\r\n\t        var targetInfo = decodeInfo[0];\r\n\t        if (targetInfo == maskedFormatInfo1 || targetInfo == maskedFormatInfo2) {\r\n\t            // Found an exact match\r\n\t            return newFormatInformation(decodeInfo[1]);\r\n\t        }\r\n\t        var bitsDifference = helpers_1.numBitsDiffering(maskedFormatInfo1, targetInfo);\r\n\t        if (bitsDifference < bestDifference) {\r\n\t            bestFormatInfo = decodeInfo[1];\r\n\t            bestDifference = bitsDifference;\r\n\t        }\r\n\t        if (maskedFormatInfo1 != maskedFormatInfo2) {\r\n\t            // also try the other option\r\n\t            bitsDifference = helpers_1.numBitsDiffering(maskedFormatInfo2, targetInfo);\r\n\t            if (bitsDifference < bestDifference) {\r\n\t                bestFormatInfo = decodeInfo[1];\r\n\t                bestDifference = bitsDifference;\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    // Hamming distance of the 32 masked codes is 7, by construction, so <= 3 bits\r\n\t    // differing means we found a match\r\n\t    if (bestDifference <= 3)\r\n\t        return newFormatInformation(bestFormatInfo);\r\n\t    return null;\r\n\t}\r\n\tfunction decodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2) {\r\n\t    var formatInfo = doDecodeFormatInformation(maskedFormatInfo1, maskedFormatInfo2);\r\n\t    if (formatInfo) {\r\n\t        return formatInfo;\r\n\t    }\r\n\t    // Should return null, but, some QR codes apparently\r\n\t    // do not mask this info. Try again by actually masking the pattern\r\n\t    // first\r\n\t    return doDecodeFormatInformation(maskedFormatInfo1 ^ FORMAT_INFO_MASK_QR, maskedFormatInfo2 ^ FORMAT_INFO_MASK_QR);\r\n\t}\r\n\tfunction readFormatInformation(matrix) {\r\n\t    // Read top-left format info bits\r\n\t    var formatInfoBits1 = 0;\r\n\t    for (var i = 0; i < 6; i++) {\r\n\t        formatInfoBits1 = matrix.copyBit(i, 8, formatInfoBits1);\r\n\t    }\r\n\t    // .. and skip a bit in the timing pattern ...\r\n\t    formatInfoBits1 = matrix.copyBit(7, 8, formatInfoBits1);\r\n\t    formatInfoBits1 = matrix.copyBit(8, 8, formatInfoBits1);\r\n\t    formatInfoBits1 = matrix.copyBit(8, 7, formatInfoBits1);\r\n\t    // .. and skip a bit in the timing pattern ...\r\n\t    for (var j = 5; j >= 0; j--) {\r\n\t        formatInfoBits1 = matrix.copyBit(8, j, formatInfoBits1);\r\n\t    }\r\n\t    // Read the top-right/bottom-left pattern too\r\n\t    var dimension = matrix.height;\r\n\t    var formatInfoBits2 = 0;\r\n\t    var jMin = dimension - 7;\r\n\t    for (var j = dimension - 1; j >= jMin; j--) {\r\n\t        formatInfoBits2 = matrix.copyBit(8, j, formatInfoBits2);\r\n\t    }\r\n\t    for (var i = dimension - 8; i < dimension; i++) {\r\n\t        formatInfoBits2 = matrix.copyBit(i, 8, formatInfoBits2);\r\n\t    }\r\n\t    // parsedFormatInfo = FormatInformation.decodeFormatInformation(formatInfoBits1, formatInfoBits2);\r\n\t    var parsedFormatInfo = decodeFormatInformation(formatInfoBits1, formatInfoBits2);\r\n\t    if (parsedFormatInfo != null) {\r\n\t        return parsedFormatInfo;\r\n\t    }\r\n\t    return null;\r\n\t}\r\n\tfunction getDataBlocks(rawCodewords, version, ecLevel) {\r\n\t    if (rawCodewords.length != version.totalCodewords) {\r\n\t        throw new Error(\"Invalid number of codewords for version; got \" + rawCodewords.length + \" expected \" + version.totalCodewords);\r\n\t    }\r\n\t    // Figure out the number and size of data blocks used by this version and\r\n\t    // error correction level\r\n\t    var ecBlocks = version.getECBlocksForLevel(ecLevel);\r\n\t    // First count the total number of data blocks\r\n\t    var totalBlocks = 0;\r\n\t    var ecBlockArray = ecBlocks.ecBlocks;\r\n\t    ecBlockArray.forEach(function (ecBlock) {\r\n\t        totalBlocks += ecBlock.count;\r\n\t    });\r\n\t    // Now establish DataBlocks of the appropriate size and number of data codewords\r\n\t    var result = new Array(totalBlocks);\r\n\t    var numResultBlocks = 0;\r\n\t    ecBlockArray.forEach(function (ecBlock) {\r\n\t        for (var i = 0; i < ecBlock.count; i++) {\r\n\t            var numDataCodewords = ecBlock.dataCodewords;\r\n\t            var numBlockCodewords = ecBlocks.ecCodewordsPerBlock + numDataCodewords;\r\n\t            result[numResultBlocks++] = { numDataCodewords: numDataCodewords, codewords: new Array(numBlockCodewords) };\r\n\t        }\r\n\t    });\r\n\t    // All blocks have the same amount of data, except that the last n\r\n\t    // (where n may be 0) have 1 more byte. Figure out where these start.\r\n\t    var shorterBlocksTotalCodewords = result[0].codewords.length;\r\n\t    var longerBlocksStartAt = result.length - 1;\r\n\t    while (longerBlocksStartAt >= 0) {\r\n\t        var numCodewords = result[longerBlocksStartAt].codewords.length;\r\n\t        if (numCodewords == shorterBlocksTotalCodewords) {\r\n\t            break;\r\n\t        }\r\n\t        longerBlocksStartAt--;\r\n\t    }\r\n\t    longerBlocksStartAt++;\r\n\t    var shorterBlocksNumDataCodewords = shorterBlocksTotalCodewords - ecBlocks.ecCodewordsPerBlock;\r\n\t    // The last elements of result may be 1 element longer;\r\n\t    // first fill out as many elements as all of them have\r\n\t    var rawCodewordsOffset = 0;\r\n\t    for (var i = 0; i < shorterBlocksNumDataCodewords; i++) {\r\n\t        for (var j = 0; j < numResultBlocks; j++) {\r\n\t            result[j].codewords[i] = rawCodewords[rawCodewordsOffset++];\r\n\t        }\r\n\t    }\r\n\t    // Fill out the last data block in the longer ones\r\n\t    for (var j = longerBlocksStartAt; j < numResultBlocks; j++) {\r\n\t        result[j].codewords[shorterBlocksNumDataCodewords] = rawCodewords[rawCodewordsOffset++];\r\n\t    }\r\n\t    // Now add in error correction blocks\r\n\t    var max = result[0].codewords.length;\r\n\t    for (var i = shorterBlocksNumDataCodewords; i < max; i++) {\r\n\t        for (var j = 0; j < numResultBlocks; j++) {\r\n\t            var iOffset = j < longerBlocksStartAt ? i : i + 1;\r\n\t            result[j].codewords[iOffset] = rawCodewords[rawCodewordsOffset++];\r\n\t        }\r\n\t    }\r\n\t    return result;\r\n\t}\r\n\tfunction correctErrors(codewordBytes, numDataCodewords) {\r\n\t    var rsDecoder = new reedsolomon_1.ReedSolomonDecoder();\r\n\t    var numCodewords = codewordBytes.length;\r\n\t    // First read into an array of ints\r\n\t    var codewordsInts = new Array(numCodewords);\r\n\t    for (var i = 0; i < numCodewords; i++) {\r\n\t        codewordsInts[i] = codewordBytes[i] & 0xFF;\r\n\t    }\r\n\t    var numECCodewords = codewordBytes.length - numDataCodewords;\r\n\t    if (!rsDecoder.decode(codewordsInts, numECCodewords))\r\n\t        return false;\r\n\t    // Copy back into array of bytes -- only need to worry about the bytes that were data\r\n\t    // We don't care about errors in the error-correction codewords\r\n\t    for (var i = 0; i < numDataCodewords; i++) {\r\n\t        codewordBytes[i] = codewordsInts[i];\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\tfunction decodeMatrix(matrix) {\r\n\t    var version = readVersion(matrix);\r\n\t    if (!version) {\r\n\t        return null;\r\n\t    }\r\n\t    var formatInfo = readFormatInformation(matrix);\r\n\t    if (!formatInfo) {\r\n\t        return null;\r\n\t    }\r\n\t    var ecLevel = formatInfo.errorCorrectionLevel;\r\n\t    // Read codewords\r\n\t    var codewords = readCodewords(matrix, version, formatInfo);\r\n\t    if (!codewords) {\r\n\t        return null;\r\n\t    }\r\n\t    // Separate into data blocks\r\n\t    var dataBlocks = getDataBlocks(codewords, version, ecLevel);\r\n\t    // Count total number of data bytes\r\n\t    var totalBytes = 0;\r\n\t    dataBlocks.forEach(function (dataBlock) {\r\n\t        totalBytes += dataBlock.numDataCodewords;\r\n\t    });\r\n\t    var resultBytes = new Array(totalBytes);\r\n\t    var resultOffset = 0;\r\n\t    // Error-correct and copy data blocks together into a stream of bytes\r\n\t    for (var _i = 0, dataBlocks_1 = dataBlocks; _i < dataBlocks_1.length; _i++) {\r\n\t        var dataBlock = dataBlocks_1[_i];\r\n\t        var codewordBytes = dataBlock.codewords;\r\n\t        var numDataCodewords = dataBlock.numDataCodewords;\r\n\t        if (!correctErrors(codewordBytes, numDataCodewords))\r\n\t            return null;\r\n\t        for (var i = 0; i < numDataCodewords; i++) {\r\n\t            resultBytes[resultOffset++] = codewordBytes[i];\r\n\t        }\r\n\t    }\r\n\t    return decodeqrdata_1.decodeQRdata(resultBytes, version.versionNumber, ecLevel.name);\r\n\t}\r\n\tfunction decode(matrix) {\r\n\t    if (matrix == null) {\r\n\t        return null;\r\n\t    }\r\n\t    var result = decodeMatrix(matrix);\r\n\t    if (result) {\r\n\t        return result;\r\n\t    }\r\n\t    // Decoding didn't work, try mirroring the QR\r\n\t    matrix.mirror();\r\n\t    return decodeMatrix(matrix);\r\n\t}\r\n\texports.decode = decode;\r\n\n\n/***/ },\n/* 10 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\r\n\tvar bitstream_1 = __webpack_require__(11);\r\n\tfunction toAlphaNumericByte(value) {\r\n\t    var ALPHANUMERIC_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B',\r\n\t        'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\r\n\t        'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\r\n\t        ' ', '$', '%', '*', '+', '-', '.', '/', ':'];\r\n\t    if (value >= ALPHANUMERIC_CHARS.length) {\r\n\t        throw new Error(\"Could not decode alphanumeric char\");\r\n\t    }\r\n\t    return ALPHANUMERIC_CHARS[value].charCodeAt(0);\r\n\t}\r\n\tvar Mode = (function () {\r\n\t    function Mode(characterCountBitsForVersions, bits) {\r\n\t        this.characterCountBitsForVersions = characterCountBitsForVersions;\r\n\t        this.bits = bits;\r\n\t    }\r\n\t    Mode.prototype.getCharacterCountBits = function (version) {\r\n\t        if (this.characterCountBitsForVersions == null) {\r\n\t            throw new Error(\"Character count doesn't apply to this mode\");\r\n\t        }\r\n\t        var offset;\r\n\t        if (version <= 9) {\r\n\t            offset = 0;\r\n\t        }\r\n\t        else if (version <= 26) {\r\n\t            offset = 1;\r\n\t        }\r\n\t        else {\r\n\t            offset = 2;\r\n\t        }\r\n\t        return this.characterCountBitsForVersions[offset];\r\n\t    };\r\n\t    return Mode;\r\n\t}());\r\n\tvar TERMINATOR_MODE = new Mode([0, 0, 0], 0x00); // Not really a mod...\r\n\tvar NUMERIC_MODE = new Mode([10, 12, 14], 0x01);\r\n\tvar ALPHANUMERIC_MODE = new Mode([9, 11, 13], 0x02);\r\n\tvar STRUCTURED_APPEND_MODE = new Mode([0, 0, 0], 0x03); // Not supported\r\n\tvar BYTE_MODE = new Mode([8, 16, 16], 0x04);\r\n\tvar ECI_MODE = new Mode(null, 0x07); // character counts don't apply\r\n\tvar KANJI_MODE = new Mode([8, 10, 12], 0x08);\r\n\tvar FNC1_FIRST_POSITION_MODE = new Mode(null, 0x05);\r\n\tvar FNC1_SECOND_POSITION_MODE = new Mode(null, 0x09);\r\n\tvar HANZI_MODE = new Mode([8, 10, 12], 0x0D);\r\n\tfunction modeForBits(bits) {\r\n\t    switch (bits) {\r\n\t        case 0x0:\r\n\t            return TERMINATOR_MODE;\r\n\t        case 0x1:\r\n\t            return NUMERIC_MODE;\r\n\t        case 0x2:\r\n\t            return ALPHANUMERIC_MODE;\r\n\t        case 0x3:\r\n\t            return STRUCTURED_APPEND_MODE;\r\n\t        case 0x4:\r\n\t            return BYTE_MODE;\r\n\t        case 0x5:\r\n\t            return FNC1_FIRST_POSITION_MODE;\r\n\t        case 0x7:\r\n\t            return ECI_MODE;\r\n\t        case 0x8:\r\n\t            return KANJI_MODE;\r\n\t        case 0x9:\r\n\t            return FNC1_SECOND_POSITION_MODE;\r\n\t        case 0xD:\r\n\t            // 0xD is defined in GBT 18284-2000, may not be supported in foreign country\r\n\t            return HANZI_MODE;\r\n\t        default:\r\n\t            throw new Error(\"Couldn't decode mode from byte array\");\r\n\t    }\r\n\t}\r\n\tfunction parseECIValue(bits) {\r\n\t    var firstByte = bits.readBits(8);\r\n\t    if ((firstByte & 0x80) == 0) {\r\n\t        // just one byte\r\n\t        return firstByte & 0x7F;\r\n\t    }\r\n\t    if ((firstByte & 0xC0) == 0x80) {\r\n\t        // two bytes\r\n\t        var secondByte = bits.readBits(8);\r\n\t        return ((firstByte & 0x3F) << 8) | secondByte;\r\n\t    }\r\n\t    if ((firstByte & 0xE0) == 0xC0) {\r\n\t        // three bytes\r\n\t        var secondThirdBytes = bits.readBits(16);\r\n\t        return ((firstByte & 0x1F) << 16) | secondThirdBytes;\r\n\t    }\r\n\t    throw new Error(\"Bad ECI bits starting with byte \" + firstByte);\r\n\t}\r\n\tfunction decodeHanziSegment(bits, result, count) {\r\n\t    // Don't crash trying to read more bits than we have available.\r\n\t    if (count * 13 > bits.available()) {\r\n\t        return false;\r\n\t    }\r\n\t    // Each character will require 2 bytes. Read the characters as 2-byte pairs\r\n\t    // and decode as GB2312 afterwards\r\n\t    var buffer = new Array(2 * count);\r\n\t    var offset = 0;\r\n\t    while (count > 0) {\r\n\t        // Each 13 bits encodes a 2-byte character\r\n\t        var twoBytes = bits.readBits(13);\r\n\t        var assembledTwoBytes = (Math.floor(twoBytes / 0x060) << 8) | (twoBytes % 0x060);\r\n\t        if (assembledTwoBytes < 0x003BF) {\r\n\t            // In the 0xA1A1 to 0xAAFE range\r\n\t            assembledTwoBytes += 0x0A1A1;\r\n\t        }\r\n\t        else {\r\n\t            // In the 0xB0A1 to 0xFAFE range\r\n\t            assembledTwoBytes += 0x0A6A1;\r\n\t        }\r\n\t        buffer[offset] = ((assembledTwoBytes >> 8) & 0xFF);\r\n\t        buffer[offset + 1] = (assembledTwoBytes & 0xFF);\r\n\t        offset += 2;\r\n\t        count--;\r\n\t    }\r\n\t    result.val = buffer;\r\n\t    return true;\r\n\t}\r\n\tfunction decodeNumericSegment(bits, result, count) {\r\n\t    // Read three digits at a time\r\n\t    while (count >= 3) {\r\n\t        // Each 10 bits encodes three digits\r\n\t        if (bits.available() < 10) {\r\n\t            return false;\r\n\t        }\r\n\t        var threeDigitsBits = bits.readBits(10);\r\n\t        if (threeDigitsBits >= 1000) {\r\n\t            return false;\r\n\t        }\r\n\t        result.val.push(toAlphaNumericByte(Math.floor(threeDigitsBits / 100)));\r\n\t        result.val.push(toAlphaNumericByte(Math.floor(threeDigitsBits / 10) % 10));\r\n\t        result.val.push(toAlphaNumericByte(threeDigitsBits % 10));\r\n\t        count -= 3;\r\n\t    }\r\n\t    if (count == 2) {\r\n\t        // Two digits left over to read, encoded in 7 bits\r\n\t        if (bits.available() < 7) {\r\n\t            return false;\r\n\t        }\r\n\t        var twoDigitsBits = bits.readBits(7);\r\n\t        if (twoDigitsBits >= 100) {\r\n\t            return false;\r\n\t        }\r\n\t        result.val.push(toAlphaNumericByte(Math.floor(twoDigitsBits / 10)));\r\n\t        result.val.push(toAlphaNumericByte(twoDigitsBits % 10));\r\n\t    }\r\n\t    else if (count == 1) {\r\n\t        // One digit left over to read\r\n\t        if (bits.available() < 4) {\r\n\t            return false;\r\n\t        }\r\n\t        var digitBits = bits.readBits(4);\r\n\t        if (digitBits >= 10) {\r\n\t            return false;\r\n\t        }\r\n\t        result.val.push(toAlphaNumericByte(digitBits));\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\tfunction decodeAlphanumericSegment(bits, result, count, fc1InEffect) {\r\n\t    // Read two characters at a time\r\n\t    var start = result.val.length;\r\n\t    while (count > 1) {\r\n\t        if (bits.available() < 11) {\r\n\t            return false;\r\n\t        }\r\n\t        var nextTwoCharsBits = bits.readBits(11);\r\n\t        result.val.push(toAlphaNumericByte(Math.floor(nextTwoCharsBits / 45)));\r\n\t        result.val.push(toAlphaNumericByte(nextTwoCharsBits % 45));\r\n\t        count -= 2;\r\n\t    }\r\n\t    if (count == 1) {\r\n\t        // special case: one character left\r\n\t        if (bits.available() < 6) {\r\n\t            return false;\r\n\t        }\r\n\t        result.val.push(toAlphaNumericByte(bits.readBits(6)));\r\n\t    }\r\n\t    // See section 6.4.8.1, 6.4.8.2\r\n\t    if (fc1InEffect) {\r\n\t        // We need to massage the result a bit if in an FNC1 mode:\r\n\t        for (var i = start; i < result.val.length; i++) {\r\n\t            if (result.val[i] == '%'.charCodeAt(0)) {\r\n\t                if (i < result.val.length - 1 && result.val[i + 1] == '%'.charCodeAt(0)) {\r\n\t                    // %% is rendered as %\r\n\t                    result.val = result.val.slice(0, i + 1).concat(result.val.slice(i + 2));\r\n\t                }\r\n\t                else {\r\n\t                    // In alpha mode, % should be converted to FNC1 separator 0x1D\r\n\t                    // THIS IS ALMOST CERTAINLY INVALID\r\n\t                    result.val[i] = 0x1D;\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    return true;\r\n\t}\r\n\tfunction decodeByteSegment(bits, result, count) {\r\n\t    // Don't crash trying to read more bits than we have available.\r\n\t    if (count << 3 > bits.available()) {\r\n\t        return false;\r\n\t    }\r\n\t    var readBytes = new Array(count);\r\n\t    for (var i = 0; i < count; i++) {\r\n\t        readBytes[i] = bits.readBits(8);\r\n\t    }\r\n\t    Array.prototype.push.apply(result.val, readBytes);\r\n\t    return true;\r\n\t}\r\n\tvar GB2312_SUBSET = 1;\r\n\t// Takes in a byte array, a qr version number and an error correction level.\r\n\t// Returns decoded data.\r\n\tfunction decodeQRdata(data, version, ecl) {\r\n\t    var symbolSequence = -1;\r\n\t    var parityData = -1;\r\n\t    var bits = new bitstream_1.BitStream(data);\r\n\t    var result = { val: [] }; // Have to pass this around so functions can share a reference to a number[]\r\n\t    var fc1InEffect = false;\r\n\t    var mode;\r\n\t    while (mode != TERMINATOR_MODE) {\r\n\t        // While still another segment to read...\r\n\t        if (bits.available() < 4) {\r\n\t            // OK, assume we're done. Really, a TERMINATOR mode should have been recorded here\r\n\t            mode = TERMINATOR_MODE;\r\n\t        }\r\n\t        else {\r\n\t            mode = modeForBits(bits.readBits(4)); // mode is encoded by 4 bits\r\n\t        }\r\n\t        if (mode != TERMINATOR_MODE) {\r\n\t            if (mode == FNC1_FIRST_POSITION_MODE || mode == FNC1_SECOND_POSITION_MODE) {\r\n\t                // We do little with FNC1 except alter the parsed result a bit according to the spec\r\n\t                fc1InEffect = true;\r\n\t            }\r\n\t            else if (mode == STRUCTURED_APPEND_MODE) {\r\n\t                if (bits.available() < 16) {\r\n\t                    return null;\r\n\t                }\r\n\t                // not really supported; but sequence number and parity is added later to the result metadata\r\n\t                // Read next 8 bits (symbol sequence #) and 8 bits (parity data), then continue\r\n\t                symbolSequence = bits.readBits(8);\r\n\t                parityData = bits.readBits(8);\r\n\t            }\r\n\t            else if (mode == ECI_MODE) {\r\n\t                // Ignore since we don't do character encoding in JS\r\n\t                var value = parseECIValue(bits);\r\n\t                if (value < 0 || value > 30) {\r\n\t                    return null;\r\n\t                }\r\n\t            }\r\n\t            else {\r\n\t                // First handle Hanzi mode which does not start with character count\r\n\t                if (mode == HANZI_MODE) {\r\n\t                    //chinese mode contains a sub set indicator right after mode indicator\r\n\t                    var subset = bits.readBits(4);\r\n\t                    var countHanzi = bits.readBits(mode.getCharacterCountBits(version));\r\n\t                    if (subset == GB2312_SUBSET) {\r\n\t                        if (!decodeHanziSegment(bits, result, countHanzi)) {\r\n\t                            return null;\r\n\t                        }\r\n\t                    }\r\n\t                }\r\n\t                else {\r\n\t                    // \"Normal\" QR code modes:\r\n\t                    // How many characters will follow, encoded in this mode?\r\n\t                    var count = bits.readBits(mode.getCharacterCountBits(version));\r\n\t                    if (mode == NUMERIC_MODE) {\r\n\t                        if (!decodeNumericSegment(bits, result, count)) {\r\n\t                            return null;\r\n\t                        }\r\n\t                    }\r\n\t                    else if (mode == ALPHANUMERIC_MODE) {\r\n\t                        if (!decodeAlphanumericSegment(bits, result, count, fc1InEffect)) {\r\n\t                            return null;\r\n\t                        }\r\n\t                    }\r\n\t                    else if (mode == BYTE_MODE) {\r\n\t                        if (!decodeByteSegment(bits, result, count)) {\r\n\t                            return null;\r\n\t                        }\r\n\t                    }\r\n\t                    else if (mode == KANJI_MODE) {\r\n\t                    }\r\n\t                    else {\r\n\t                        return null;\r\n\t                    }\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t    }\r\n\t    return result.val;\r\n\t}\r\n\texports.decodeQRdata = decodeQRdata;\r\n\n\n/***/ },\n/* 11 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar BitStream = (function () {\r\n\t    function BitStream(bytes) {\r\n\t        this.byteOffset = 0;\r\n\t        this.bitOffset = 0;\r\n\t        this.bytes = bytes;\r\n\t    }\r\n\t    BitStream.prototype.readBits = function (numBits) {\r\n\t        if (numBits < 1 || numBits > 32 || numBits > this.available()) {\r\n\t            throw new Error(\"Cannot read \" + numBits.toString() + \" bits\");\r\n\t        }\r\n\t        var result = 0;\r\n\t        // First, read remainder from current byte\r\n\t        if (this.bitOffset > 0) {\r\n\t            var bitsLeft = 8 - this.bitOffset;\r\n\t            var toRead = numBits < bitsLeft ? numBits : bitsLeft;\r\n\t            var bitsToNotRead = bitsLeft - toRead;\r\n\t            var mask = (0xFF >> (8 - toRead)) << bitsToNotRead;\r\n\t            result = (this.bytes[this.byteOffset] & mask) >> bitsToNotRead;\r\n\t            numBits -= toRead;\r\n\t            this.bitOffset += toRead;\r\n\t            if (this.bitOffset == 8) {\r\n\t                this.bitOffset = 0;\r\n\t                this.byteOffset++;\r\n\t            }\r\n\t        }\r\n\t        // Next read whole bytes\r\n\t        if (numBits > 0) {\r\n\t            while (numBits >= 8) {\r\n\t                result = (result << 8) | (this.bytes[this.byteOffset] & 0xFF);\r\n\t                this.byteOffset++;\r\n\t                numBits -= 8;\r\n\t            }\r\n\t            // Finally read a partial byte\r\n\t            if (numBits > 0) {\r\n\t                var bitsToNotRead = 8 - numBits;\r\n\t                var mask = (0xFF >> bitsToNotRead) << bitsToNotRead;\r\n\t                result = (result << numBits) | ((this.bytes[this.byteOffset] & mask) >> bitsToNotRead);\r\n\t                this.bitOffset += numBits;\r\n\t            }\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    BitStream.prototype.available = function () {\r\n\t        return 8 * (this.bytes.length - this.byteOffset) - this.bitOffset;\r\n\t    };\r\n\t    return BitStream;\r\n\t}());\r\n\texports.BitStream = BitStream;\r\n\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\r\n\tvar ReedSolomonDecoder = (function () {\r\n\t    function ReedSolomonDecoder() {\r\n\t        this.field = new GenericGF(0x011D, 256, 0); // x^8 + x^4 + x^3 + x^2 + 1\r\n\t    }\r\n\t    ReedSolomonDecoder.prototype.decode = function (received, twoS) {\r\n\t        var poly = new GenericGFPoly(this.field, received);\r\n\t        var syndromeCoefficients = new Array(twoS);\r\n\t        var noError = true;\r\n\t        for (var i = 0; i < twoS; i++) {\r\n\t            var evaluation = poly.evaluateAt(this.field.exp(i + this.field.generatorBase));\r\n\t            syndromeCoefficients[syndromeCoefficients.length - 1 - i] = evaluation;\r\n\t            if (evaluation != 0) {\r\n\t                noError = false;\r\n\t            }\r\n\t        }\r\n\t        if (noError) {\r\n\t            return true;\r\n\t        }\r\n\t        var syndrome = new GenericGFPoly(this.field, syndromeCoefficients);\r\n\t        var sigmaOmega = this.runEuclideanAlgorithm(this.field.buildMonomial(twoS, 1), syndrome, twoS);\r\n\t        if (sigmaOmega == null)\r\n\t            return false;\r\n\t        var sigma = sigmaOmega[0];\r\n\t        var errorLocations = this.findErrorLocations(sigma);\r\n\t        if (errorLocations == null)\r\n\t            return false;\r\n\t        var omega = sigmaOmega[1];\r\n\t        var errorMagnitudes = this.findErrorMagnitudes(omega, errorLocations);\r\n\t        for (var i = 0; i < errorLocations.length; i++) {\r\n\t            var position = received.length - 1 - this.field.log(errorLocations[i]);\r\n\t            if (position < 0) {\r\n\t                // throw new ReedSolomonException(\"Bad error location\");\r\n\t                return false;\r\n\t            }\r\n\t            received[position] = GenericGF.addOrSubtract(received[position], errorMagnitudes[i]);\r\n\t        }\r\n\t        return true;\r\n\t    };\r\n\t    ReedSolomonDecoder.prototype.runEuclideanAlgorithm = function (a, b, R) {\r\n\t        // Assume a's degree is >= b's\r\n\t        if (a.degree() < b.degree()) {\r\n\t            var temp = a;\r\n\t            a = b;\r\n\t            b = temp;\r\n\t        }\r\n\t        var rLast = a;\r\n\t        var r = b;\r\n\t        var tLast = this.field.zero;\r\n\t        var t = this.field.one;\r\n\t        // Run Euclidean algorithm until r's degree is less than R/2\r\n\t        while (r.degree() >= R / 2) {\r\n\t            var rLastLast = rLast;\r\n\t            var tLastLast = tLast;\r\n\t            rLast = r;\r\n\t            tLast = t;\r\n\t            // Divide rLastLast by rLast, with quotient in q and remainder in r\r\n\t            if (rLast.isZero()) {\r\n\t                // Oops, Euclidean algorithm already terminated?\r\n\t                // throw new ReedSolomonException(\"r_{i-1} was zero\");\r\n\t                return null;\r\n\t            }\r\n\t            r = rLastLast;\r\n\t            var q = this.field.zero;\r\n\t            var denominatorLeadingTerm = rLast.getCoefficient(rLast.degree());\r\n\t            var dltInverse = this.field.inverse(denominatorLeadingTerm);\r\n\t            while (r.degree() >= rLast.degree() && !r.isZero()) {\r\n\t                var degreeDiff = r.degree() - rLast.degree();\r\n\t                var scale = this.field.multiply(r.getCoefficient(r.degree()), dltInverse);\r\n\t                q = q.addOrSubtract(this.field.buildMonomial(degreeDiff, scale));\r\n\t                r = r.addOrSubtract(rLast.multiplyByMonomial(degreeDiff, scale));\r\n\t            }\r\n\t            t = q.multiplyPoly(tLast).addOrSubtract(tLastLast);\r\n\t            if (r.degree() >= rLast.degree()) {\r\n\t                // throw new IllegalStateException(\"Division algorithm failed to reduce polynomial?\");\r\n\t                return null;\r\n\t            }\r\n\t        }\r\n\t        var sigmaTildeAtZero = t.getCoefficient(0);\r\n\t        if (sigmaTildeAtZero == 0) {\r\n\t            // throw new ReedSolomonException(\"sigmaTilde(0) was zero\");\r\n\t            return null;\r\n\t        }\r\n\t        var inverse = this.field.inverse(sigmaTildeAtZero);\r\n\t        var sigma = t.multiply(inverse);\r\n\t        var omega = r.multiply(inverse);\r\n\t        return [sigma, omega];\r\n\t    };\r\n\t    ReedSolomonDecoder.prototype.findErrorLocations = function (errorLocator) {\r\n\t        // This is a direct application of Chien's search\r\n\t        var numErrors = errorLocator.degree();\r\n\t        if (numErrors == 1) {\r\n\t            // shortcut\r\n\t            return [errorLocator.getCoefficient(1)];\r\n\t        }\r\n\t        var result = new Array(numErrors);\r\n\t        var e = 0;\r\n\t        for (var i = 1; i < this.field.size && e < numErrors; i++) {\r\n\t            if (errorLocator.evaluateAt(i) == 0) {\r\n\t                result[e] = this.field.inverse(i);\r\n\t                e++;\r\n\t            }\r\n\t        }\r\n\t        if (e != numErrors) {\r\n\t            // throw new ReedSolomonException(\"Error locator degree does not match number of roots\");\r\n\t            return null;\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    ReedSolomonDecoder.prototype.findErrorMagnitudes = function (errorEvaluator, errorLocations) {\r\n\t        // This is directly applying Forney's Formula\r\n\t        var s = errorLocations.length;\r\n\t        var result = new Array(s);\r\n\t        for (var i = 0; i < s; i++) {\r\n\t            var xiInverse = this.field.inverse(errorLocations[i]);\r\n\t            var denominator = 1;\r\n\t            for (var j = 0; j < s; j++) {\r\n\t                if (i != j) {\r\n\t                    //denominator = field.multiply(denominator,\r\n\t                    //    GenericGF.addOrSubtract(1, field.multiply(errorLocations[j], xiInverse)));\r\n\t                    // Above should work but fails on some Apple and Linux JDKs due to a Hotspot bug.\r\n\t                    // Below is a funny-looking workaround from Steven Parkes\r\n\t                    var term = this.field.multiply(errorLocations[j], xiInverse);\r\n\t                    var termPlus1 = (term & 0x1) == 0 ? term | 1 : term & ~1;\r\n\t                    denominator = this.field.multiply(denominator, termPlus1);\r\n\t                }\r\n\t            }\r\n\t            result[i] = this.field.multiply(errorEvaluator.evaluateAt(xiInverse), this.field.inverse(denominator));\r\n\t            if (this.field.generatorBase != 0) {\r\n\t                result[i] = this.field.multiply(result[i], xiInverse);\r\n\t            }\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    return ReedSolomonDecoder;\r\n\t}());\r\n\texports.ReedSolomonDecoder = ReedSolomonDecoder;\r\n\tvar GenericGFPoly = (function () {\r\n\t    function GenericGFPoly(field, coefficients) {\r\n\t        if (coefficients.length == 0) {\r\n\t            throw new Error(\"No coefficients.\");\r\n\t        }\r\n\t        this.field = field;\r\n\t        var coefficientsLength = coefficients.length;\r\n\t        if (coefficientsLength > 1 && coefficients[0] == 0) {\r\n\t            // Leading term must be non-zero for anything except the constant polynomial \"0\"\r\n\t            var firstNonZero = 1;\r\n\t            while (firstNonZero < coefficientsLength && coefficients[firstNonZero] == 0) {\r\n\t                firstNonZero++;\r\n\t            }\r\n\t            if (firstNonZero == coefficientsLength) {\r\n\t                this.coefficients = field.zero.coefficients;\r\n\t            }\r\n\t            else {\r\n\t                this.coefficients = new Array(coefficientsLength - firstNonZero);\r\n\t                /*Array.Copy(coefficients,       // Source array\r\n\t                  firstNonZero,              // Source index\r\n\t                  this.coefficients,         // Destination array\r\n\t                  0,                         // Destination index\r\n\t                  this.coefficients.length); // length*/\r\n\t                for (var i = 0; i < this.coefficients.length; i++) {\r\n\t                    this.coefficients[i] = coefficients[firstNonZero + i];\r\n\t                }\r\n\t            }\r\n\t        }\r\n\t        else {\r\n\t            this.coefficients = coefficients;\r\n\t        }\r\n\t    }\r\n\t    GenericGFPoly.prototype.evaluateAt = function (a) {\r\n\t        var result = 0;\r\n\t        if (a == 0) {\r\n\t            // Just return the x^0 coefficient\r\n\t            return this.getCoefficient(0);\r\n\t        }\r\n\t        var size = this.coefficients.length;\r\n\t        if (a == 1) {\r\n\t            // Just the sum of the coefficients\r\n\t            this.coefficients.forEach(function (coefficient) {\r\n\t                result = GenericGF.addOrSubtract(result, coefficient);\r\n\t            });\r\n\t            return result;\r\n\t        }\r\n\t        result = this.coefficients[0];\r\n\t        for (var i = 1; i < size; i++) {\r\n\t            result = GenericGF.addOrSubtract(this.field.multiply(a, result), this.coefficients[i]);\r\n\t        }\r\n\t        return result;\r\n\t    };\r\n\t    GenericGFPoly.prototype.getCoefficient = function (degree) {\r\n\t        return this.coefficients[this.coefficients.length - 1 - degree];\r\n\t    };\r\n\t    GenericGFPoly.prototype.degree = function () {\r\n\t        return this.coefficients.length - 1;\r\n\t    };\r\n\t    GenericGFPoly.prototype.isZero = function () {\r\n\t        return this.coefficients[0] == 0;\r\n\t    };\r\n\t    GenericGFPoly.prototype.addOrSubtract = function (other) {\r\n\t        /* TODO, fix this.\r\n\t        if (!this.field.Equals(other.field))\r\n\t        {\r\n\t          throw new Error(\"GenericGFPolys do not have same GenericGF field\");\r\n\t        }*/\r\n\t        if (this.isZero()) {\r\n\t            return other;\r\n\t        }\r\n\t        if (other.isZero()) {\r\n\t            return this;\r\n\t        }\r\n\t        var smallerCoefficients = this.coefficients;\r\n\t        var largerCoefficients = other.coefficients;\r\n\t        if (smallerCoefficients.length > largerCoefficients.length) {\r\n\t            var temp = smallerCoefficients;\r\n\t            smallerCoefficients = largerCoefficients;\r\n\t            largerCoefficients = temp;\r\n\t        }\r\n\t        var sumDiff = new Array(largerCoefficients.length);\r\n\t        var lengthDiff = largerCoefficients.length - smallerCoefficients.length;\r\n\t        // Copy high-order terms only found in higher-degree polynomial's coefficients\r\n\t        ///Array.Copy(largerCoefficients, 0, sumDiff, 0, lengthDiff);\r\n\t        for (var i = 0; i < lengthDiff; i++) {\r\n\t            sumDiff[i] = largerCoefficients[i];\r\n\t        }\r\n\t        for (var i = lengthDiff; i < largerCoefficients.length; i++) {\r\n\t            sumDiff[i] = GenericGF.addOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]);\r\n\t        }\r\n\t        return new GenericGFPoly(this.field, sumDiff);\r\n\t    };\r\n\t    GenericGFPoly.prototype.multiply = function (scalar) {\r\n\t        if (scalar == 0) {\r\n\t            return this.field.zero;\r\n\t        }\r\n\t        if (scalar == 1) {\r\n\t            return this;\r\n\t        }\r\n\t        var size = this.coefficients.length;\r\n\t        var product = new Array(size);\r\n\t        for (var i = 0; i < size; i++) {\r\n\t            product[i] = this.field.multiply(this.coefficients[i], scalar);\r\n\t        }\r\n\t        return new GenericGFPoly(this.field, product);\r\n\t    };\r\n\t    GenericGFPoly.prototype.multiplyPoly = function (other) {\r\n\t        /* TODO Fix this.\r\n\t        if (!field.Equals(other.field))\r\n\t        {\r\n\t          throw new Error(\"GenericGFPolys do not have same GenericGF field\");\r\n\t        }*/\r\n\t        if (this.isZero() || other.isZero()) {\r\n\t            return this.field.zero;\r\n\t        }\r\n\t        var aCoefficients = this.coefficients;\r\n\t        var aLength = aCoefficients.length;\r\n\t        var bCoefficients = other.coefficients;\r\n\t        var bLength = bCoefficients.length;\r\n\t        var product = new Array(aLength + bLength - 1);\r\n\t        for (var i = 0; i < aLength; i++) {\r\n\t            var aCoeff = aCoefficients[i];\r\n\t            for (var j = 0; j < bLength; j++) {\r\n\t                product[i + j] = GenericGF.addOrSubtract(product[i + j], this.field.multiply(aCoeff, bCoefficients[j]));\r\n\t            }\r\n\t        }\r\n\t        return new GenericGFPoly(this.field, product);\r\n\t    };\r\n\t    GenericGFPoly.prototype.multiplyByMonomial = function (degree, coefficient) {\r\n\t        if (degree < 0) {\r\n\t            throw new Error(\"Invalid degree less than 0\");\r\n\t        }\r\n\t        if (coefficient == 0) {\r\n\t            return this.field.zero;\r\n\t        }\r\n\t        var size = this.coefficients.length;\r\n\t        var product = new Array(size + degree);\r\n\t        for (var i = 0; i < size; i++) {\r\n\t            product[i] = this.field.multiply(this.coefficients[i], coefficient);\r\n\t        }\r\n\t        return new GenericGFPoly(this.field, product);\r\n\t    };\r\n\t    return GenericGFPoly;\r\n\t}());\r\n\tvar GenericGF = (function () {\r\n\t    function GenericGF(primitive, size, genBase) {\r\n\t        // ok.\r\n\t        this.INITIALIZATION_THRESHOLD = 0;\r\n\t        this.initialized = false;\r\n\t        this.primitive = primitive;\r\n\t        this.size = size;\r\n\t        this.generatorBase = genBase;\r\n\t        if (size <= this.INITIALIZATION_THRESHOLD) {\r\n\t            this.initialize();\r\n\t        }\r\n\t    }\r\n\t    GenericGF.prototype.initialize = function () {\r\n\t        this.expTable = new Array(this.size);\r\n\t        this.logTable = new Array(this.size);\r\n\t        var x = 1;\r\n\t        for (var i = 0; i < this.size; i++) {\r\n\t            this.expTable[i] = x;\r\n\t            x <<= 1; // x = x * 2; we're assuming the generator alpha is 2\r\n\t            if (x >= this.size) {\r\n\t                x ^= this.primitive;\r\n\t                x &= this.size - 1;\r\n\t            }\r\n\t        }\r\n\t        for (var i = 0; i < this.size - 1; i++) {\r\n\t            this.logTable[this.expTable[i]] = i;\r\n\t        }\r\n\t        // logTable[0] == 0 but this should never be used\r\n\t        this.zero = new GenericGFPoly(this, [0]);\r\n\t        this.one = new GenericGFPoly(this, [1]);\r\n\t        this.initialized = true;\r\n\t    };\r\n\t    GenericGF.addOrSubtract = function (a, b) {\r\n\t        return a ^ b;\r\n\t    };\r\n\t    GenericGF.prototype.checkInit = function () {\r\n\t        if (!this.initialized)\r\n\t            this.initialize();\r\n\t    };\r\n\t    GenericGF.prototype.multiply = function (a, b) {\r\n\t        this.checkInit();\r\n\t        if (a == 0 || b == 0) {\r\n\t            return 0;\r\n\t        }\r\n\t        return this.expTable[(this.logTable[a] + this.logTable[b]) % (this.size - 1)];\r\n\t    };\r\n\t    GenericGF.prototype.exp = function (a) {\r\n\t        this.checkInit();\r\n\t        return this.expTable[a];\r\n\t    };\r\n\t    GenericGF.prototype.log = function (a) {\r\n\t        this.checkInit();\r\n\t        if (a == 0) {\r\n\t            throw new Error(\"Can't take log(0)\");\r\n\t        }\r\n\t        return this.logTable[a];\r\n\t    };\r\n\t    GenericGF.prototype.inverse = function (a) {\r\n\t        this.checkInit();\r\n\t        if (a == 0) {\r\n\t            throw new Error(\"Can't invert 0\");\r\n\t        }\r\n\t        return this.expTable[this.size - this.logTable[a] - 1];\r\n\t    };\r\n\t    GenericGF.prototype.buildMonomial = function (degree, coefficient) {\r\n\t        this.checkInit();\r\n\t        if (degree < 0) {\r\n\t            throw new Error(\"Invalid monomial degree less than 0\");\r\n\t        }\r\n\t        if (coefficient == 0) {\r\n\t            return this.zero;\r\n\t        }\r\n\t        var coefficients = new Array(degree + 1);\r\n\t        coefficients[0] = coefficient;\r\n\t        return new GenericGFPoly(this, coefficients);\r\n\t    };\r\n\t    return GenericGF;\r\n\t}());\r\n\n\n/***/ }\n/******/ ])\n});\n;\n// jsQR is concatenated by gulp\n\nself.addEventListener('message', function(e) {\n  var decoded = jsQR.decodeQRFromImage(\n    e.data.data,\n    e.data.width,\n    e.data.height\n  )\n  postMessage(decoded)\n})\n"],{type:'application/javascript'});// Props that are allowed to change dynamicly
var propsKeys=['delay','legacyMode','facingMode'];module.exports=(_temp=_class=function(_Component){_inherits(Reader,_Component);function Reader(props){_classCallCheck(this,Reader);// Bind function to the class
var _this=_possibleConstructorReturn(this,(Reader.__proto__||Object.getPrototypeOf(Reader)).call(this,props));_this.els={};_this.initiate=_this.initiate.bind(_this);_this.initiateLegacyMode=_this.initiateLegacyMode.bind(_this);_this.check=_this.check.bind(_this);_this.handleVideo=_this.handleVideo.bind(_this);_this.handleLoadStart=_this.handleLoadStart.bind(_this);_this.handleInputChange=_this.handleInputChange.bind(_this);_this.clearComponent=_this.clearComponent.bind(_this);_this.handleReaderLoad=_this.handleReaderLoad.bind(_this);_this.openImageDialog=_this.openImageDialog.bind(_this);_this.handleWorkerMessage=_this.handleWorkerMessage.bind(_this);_this.setRefFactory=_this.setRefFactory.bind(_this);return _this;}_createClass(Reader,[{key:'componentDidMount',value:function componentDidMount(){// Initiate web worker execute handler according to mode.
this.worker=new Worker(URL.createObjectURL(workerBlob));this.worker.onmessage=this.handleWorkerMessage;if(!this.props.legacyMode){this.initiate();}else{this.initiateLegacyMode();}}},{key:'componentWillReceiveProps',value:function componentWillReceiveProps(nextProps){// React according to change in props
var changedProps=havePropsChanged(this.props,nextProps,propsKeys);var _iteratorNormalCompletion=true;var _didIteratorError=false;var _iteratorError=undefined;try{for(var _iterator=changedProps[Symbol.iterator](),_step;!(_iteratorNormalCompletion=(_step=_iterator.next()).done);_iteratorNormalCompletion=true){var prop=_step.value;if(prop=='facingMode'){this.clearComponent();this.initiate(nextProps);break;}else if(prop=='delay'){if(this.props.delay==false){this.timeout=setTimeout(this.check,this.props.delay);}else if(nextProps.delay==false){clearTimeout(this.timeout);}}else if(prop=='legacyMode'){if(this.props.legacyMode&&!nextProps.legacyMode){this.clearComponent();this.initiate(nextProps);}else{this.clearComponent();this.componentDidUpdate=this.initiateLegacyMode;}break;}}}catch(err){_didIteratorError=true;_iteratorError=err;}finally{try{if(!_iteratorNormalCompletion&&_iterator.return){_iterator.return();}}finally{if(_didIteratorError){throw _iteratorError;}}}}},{key:'shouldComponentUpdate',value:function shouldComponentUpdate(nextProps){// Only render when the `propsKeys` have changed.
var changedProps=havePropsChanged(this.props,nextProps,propsKeys);return changedProps.length>0;}},{key:'componentWillUnmount',value:function componentWillUnmount(){// Stop web-worker and clear the component
if(this.worker){this.worker.terminate();this.worker=undefined;}this.clearComponent();}},{key:'clearComponent',value:function clearComponent(){// Remove all event listeners and variables
if(this.timeout){clearTimeout(this.timeout);this.timeout=undefined;}if(this.stopCamera){this.stopCamera();}if(this.reader){this.reader.removeEventListener('load',this.handleReaderLoad);}if(this.els.img){this.els.img.removeEventListener('load',this.check);}}},{key:'initiate',value:function initiate(){var props=arguments.length>0&&arguments[0]!==undefined?arguments[0]:this.props;var onError=props.onError,facingMode=props.facingMode;getDeviceId(facingMode).then(function(deviceId){return navigator.mediaDevices.getUserMedia({video:{deviceId:deviceId,facingMode:facingMode=='rear'?'environment':'user',width:{min:360,ideal:1280,max:1920},height:{min:240,ideal:720,max:1080}}});}).then(this.handleVideo).catch(onError);}},{key:'handleVideo',value:function handleVideo(stream){var preview=this.els.preview;// Handle different browser implementations of `createObjectURL`
if(window.URL.createObjectURL){preview.src=window.URL.createObjectURL(stream);}else if(window.webkitURL){preview.src=window.webkitURL.createObjectURL(stream);}else if(preview.mozSrcObject!==undefined){preview.mozSrcObject=stream;}else{preview.src=stream;}var streamTrack=stream.getTracks()[0];// Assign `stopCamera` so the track can be stopped once component is cleared
this.stopCamera=streamTrack.stop.bind(streamTrack);preview.addEventListener('loadstart',this.handleLoadStart);}},{key:'handleLoadStart',value:function handleLoadStart(){var preview=this.els.preview;preview.play();if(typeof this.props.delay=='number'){this.timeout=setTimeout(this.check,this.props.delay);}// Some browsers call loadstart continuously
preview.removeEventListener('loadstart',this.handleLoadStart);}},{key:'check',value:function check(){var _props=this.props,legacyMode=_props.legacyMode,maxImageSize=_props.maxImageSize,delay=_props.delay;var _els=this.els,preview=_els.preview,canvas=_els.canvas,img=_els.img;// Get image/video dimensions
var width=Math.floor(legacyMode?img.naturalWidth:preview.videoWidth);var height=Math.floor(legacyMode?img.naturalHeight:preview.videoHeight);if(legacyMode){// Downscale image to `maxImageSize`
var ratio=1.1;while((width>height?width:height)>maxImageSize){width=Math.floor(width/ratio);height=Math.floor(height/ratio);}}canvas.width=width;canvas.height=height;var previewIsPlaying=preview&&preview.readyState===preview.HAVE_ENOUGH_DATA;if(legacyMode||previewIsPlaying){var ctx=canvas.getContext('2d');ctx.drawImage(legacyMode?img:preview,0,0,width,height);var imageData=ctx.getImageData(0,0,width,height);// Send data to web-worker
this.worker.postMessage(imageData);}else{// Preview not ready -> check later
this.timeout=setTimeout(this.check,delay);}}},{key:'handleWorkerMessage',value:function handleWorkerMessage(e){var _props2=this.props,onScan=_props2.onScan,legacyMode=_props2.legacyMode,onError=_props2.onError,delay=_props2.delay;var decoded=e.data;if(decoded){onScan(decoded);}else if(legacyMode){onError(new Error('QR Code not recognised in image.'));}if(typeof delay=='number'&&this.worker){this.timeout=setTimeout(this.check,delay);}}},{key:'initiateLegacyMode',value:function initiateLegacyMode(){this.reader=new FileReader();this.reader.addEventListener('load',this.handleReaderLoad);this.els.img.addEventListener('load',this.check,false);// Reset componentDidUpdate
this.componentDidUpdate=undefined;}},{key:'handleInputChange',value:function handleInputChange(e){var selectedImg=e.target.files[0];this.reader.readAsDataURL(selectedImg);}},{key:'handleReaderLoad',value:function handleReaderLoad(e){// Set selected image blob as img source
this.els.img.src=e.target.result;}},{key:'openImageDialog',value:function openImageDialog(){// Function to be executed by parent in user action context to trigger img file uploader
this.els.input.click();}},{key:'setRefFactory',value:function setRefFactory(key){var _this2=this;return function(element){_this2.els[key]=element;};}},{key:'render',value:function render(){var hiddenStyle={display:'none'};var previewStyle=_extends({display:'block',objectFit:'contain'},this.props.style);return React.createElement('section',null,this.props.legacyMode?React.createElement('div',null,React.createElement('input',{style:hiddenStyle,type:'file',accept:'image/*',ref:this.setRefFactory('input'),onChange:this.handleInputChange}),React.createElement('img',{style:previewStyle,ref:this.setRefFactory('img')})):React.createElement('video',{style:previewStyle,ref:this.setRefFactory('preview')}),React.createElement('canvas',{style:hiddenStyle,ref:this.setRefFactory('canvas')}));}}]);return Reader;}(Component),_class.propTypes={onScan:PropTypes.func.isRequired,onError:PropTypes.func.isRequired,delay:PropTypes.oneOfType([PropTypes.number,PropTypes.bool]),facingMode:PropTypes.string,legacyMode:PropTypes.bool,maxImageSize:PropTypes.number,style:PropTypes.object},_class.defaultProps={delay:500,style:{},maxImageSize:1500},_temp);